<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="shortcut icon" type="image/x-icon" href="https://app.pedbox.co/assets/logos/logo_blanco.png"/>
  <title> Chat </title>

  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet" />
  <link href="/css/nucleo-svg.css" rel="stylesheet" />
  <link href="/css/nucleo-icons.css" rel="stylesheet" />
  <link href="/css/nucleo-svg.css" rel="stylesheet" />
  <link id="pagestyle" href="/css/soft-ui-dashboard.css?v=1.0.3" rel="stylesheet" />
  <link rel="stylesheet" href="/css/jquery-ui.min.css">
  <link rel="stylesheet" href="/css/reports.css">

  <script src="https://kit.fontawesome.com/42d5adcbca.js" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.0/socket.io.js" integrity="sha512-+l9L4lMTFNy3dEglQpprf7jQBhQsQ3/WvOnjaN/+/L4i0jOstgScV0q2TjfvRF4V+ZePMDuZYIQtg5T4MKr+MQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="/js/jquery.js"></script>
  <script src="/js/helpers.js"></script>

  <!-- Color Page -->
  <%- include('./partials/colors.ejs') %> 

  <style>
    .counters{display: none;background: rgb(76, 175, 80); color: #fff; font-size: 10px; margin-left: 11px; width: 20px; height: 20px; text-align: center; position: absolute; right: -20px; border-radius: 10px; line-height: 20px;}
    .bg-gradient-chat { background-image: linear-gradient( 310deg , #7928CA 0%, #302560 100%);color: #fff; }
    .chat-cont{cursor: pointer;}
    /*.top-navbar{background-image: url(../assets/img/logo-pedbox-chat.png); background-size: 215px; background-repeat: no-repeat; background-position: center 16px;} /*Para IOS*/
    /* .top-navbar{background-image: url(../assets/img/logo-pedbox-chat.png); background-size: 215px; background-repeat: no-repeat; background-position: center 35px;}   Para Windows */
    .cont-chat::after{background-image: url(/img/bg-chat.png); background-size: 150px;  content: ""; opacity: 0.1; top: 0; left: 0; bottom: 0; right: 0; position: absolute; z-index: 1;}
    #user-avatar, #e-user-avatar{cursor: pointer;}
    .date-msg{max-width: 100%;clear: both;text-align: center;padding: 20px;display: block !important;}
    .c-msg{max-width: 75%;clear: both;}
    .c-msg a{color: #63B3ED;text-decoration: underline;}
    .c-emi{background-color: #302560; color: #fff;}
    .c-msg .hour-msg{text-align: right;font-size: 10px; color: #828282;width: 100%;display: block;}
    .c-emi .hour-msg{text-align: right;font-size: 10px; color: #c3c3c3;width: 100%;display: block;}  /*quitar desde width y text-align: left*/
    .audio-cont{font-size: 19px;}
    .audio-cont i{font-weight: normal;font-size: 25px;}
    .btn-send{width: 50px;height: 50px;padding: 10px 16px; border-radius: 25px;}
    .btn-send:hover{color: #eeeeee;}
    .btn-send i{font-weight: bold;font-size: 19px;}
    .avatar{position: relative;}
    .indicator{position: absolute; bottom: 0px; right: 0px;}
    .preview {background-color: lightgrey; position: absolute; height: 78% !important; width: 100%; z-index: 999; border-top-right-radius: 1rem; border-top-left-radius: 1rem;}
    .previewBorder{border: 3px dashed white; height: 85% !important;}
    .deleteButton{border-radius: 50%; bottom: 30px; font-size: 1.25rem; z-index: 990; box-shadow: 0 2px 12px 0 rgb(0 0 0 / 16%); cursor: pointer;background: #ea0606;right: auto; right: 5%; position: absolute;}
    .noTiene{display: none;}
    .evt-calendar{background: #fff; color: #525151; border: 1px solid #ccc; float: left; clear: both;height: 170px; border-radius: 5px; width: 415px;}
    .evt-calendar .c-date{float: left;width: 135px;background: #f6f6f6;height: 100%;border: 1px solid #e5e5e5;padding: 21px;}
    .evt-calendar .c-date .c-cont-date{background: url(/img/icon_mail.png) no-repeat 0 0; height: 80px;position: relative;width: 70px; margin-left: 15px;}
    .evt-calendar .c-date .c-cont-date .c-month{color: #fff;font-size: 12px;top: -2px;text-align: center;width: 70px;position: absolute;}
    .evt-calendar .c-date .c-cont-date .c-day{color: #222222;font-size: 26px;top: 20px;font-weight: bold;position: absolute;text-align: center;width: 70px;}
    .evt-calendar .c-date .c-cont-date .c-day-n{color: #222222; font-size: 12px; top: 53px; font-weight: bold; position: absolute; text-align: center; width: 70px;}
    .evt-calendar .c-info{float: left;padding: 0 20px;width: calc(100% - 135px);}
    .evt-calendar .c-info h3{margin: 10px 0px 20px;font-size: 15px;word-break: normal;max-width: 290px;}
    .evt-calendar .c-info .ci-info{margin: 0;font-weight: 100;}
    .evt-calendar .lnk-event{color: #222222 !important; float: right; font-size: 15px; font-weight: normal; }
    #chat-history .emoji{font-size:25px; transform: translateY(5px); line-height: 30px; display:inline-block;}
    #chat-history .emoji .only-emoji{line-height: 36px; font-size:40px; clear: both;}
    .cont-fa{float: left;padding: 15px;}
    .cont-fa i{font-size: 25px; color: gray; cursor: pointer; }
    .cont-fa i:hover{color:#333;}
    #close-emoticons{display: none;}
    #close-emoticonsModal{display: none;}
    #emoticons{display: none;position: absolute; background: #fff; width: 100%; height: 200px; bottom: 85px; left: 0px;overflow: auto;border-top: 1px #ececec solid;z-index: 9;}
    #emoticons ul{list-style: none;float: left;clear: both;padding: 25px;}
    #emoticons ul li{float: left;cursor: pointer;}
    #emoticons ul li span{font-size: 30px;padding: 10px 5px;display: block;}
    #emoticons ul li:hover span{background: #ececec;}
    #emoticonsModal{display: none;position: absolute; background: #fff; width: 100%; height: 200px; bottom: 85px; left: 0px;overflow: auto;border-top: 1px #ececec solid;z-index: 9;}
    #emoticonsModal ul{list-style: none;float: left;clear: both;padding: 25px;}
    #emoticonsModal ul li{float: left;cursor: pointer;}
    #emoticonsModal ul li span{font-size: 30px;padding: 10px 5px;display: block;}
    #emoticonsModal ul li:hover span{background: #ececec;}
    .status {color: #92959E; width: 250px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; font-size:14px;}
    .hide-status {display: none;color: #92959E; width: 250px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; height: 25px;}
    ::-webkit-scrollbar{display: none;}
    .shadowInput{box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%);}
    .massiveMesage .imgPreviewUpload {max-width: 100px !important; max-height: 100px !important;}
    .massiveMesage img {max-width: 100%; width: auto;}
    #lastChats{ background-color: white; border-radius: 1rem; box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%)}
    .menu { border-radius: 5px; background: transparent; border: none; position: absolute; right: 0px;}
    .menu button {font-size: large; line-height: normal;}
    .menu ul{border: 0 solid rgba(0, 0, 0, 0.125); box-shadow: 0 0 10px 0px;}
    .menu li a {text-decoration: none; color: #525151;}
    .menuStatus { border-radius: 5px; background: transparent; border: none;}
    .menuStatus button {font-size: large; line-height: normal;}
    .menuStatus ul{border: 0 solid rgba(0, 0, 0, 0.125); box-shadow: 0 0 10px 0px;}
    .menuStatus li a {text-decoration: none; color: #525151;}
  </style>
</head>

<body class="g-sidenav-show bg-gray-100">

  <!-- Menu -->
  <%- include('./partials/menu.ejs') %> 

  <main class="main-content max-height-vh-100 h-100">

    <!-- Cabecera -->
    <%- include('./partials/header.ejs') %>
  
      <!-- Cotent -->
      <div class="p-4 ps-0 pt-0">
        <div class="">



          <div class="tab-content">

            <div class="container-fluid py-3 tab-pane" id="users" style="position: relative">

              <div class="d-flex"> 
                <div class="">
                  <div style="display: flex; justify-content: center; align-items: center;">
                    <a  id="btnChats" class="nav-link btn btn-danger mb-1 bg-primary tab m-0 d-flex align-items-center justify-content-center" style="border-radius: 8px; color: white; display: none;" href="javascript:toggleViewChat();" data-bs-toggle="tooltip" data-bs-placement="top" title="Bandeja de entrada">
                      <i class="fa fa-envelope-open-text me-2"></i> Bandeja de entrada
                    </a>
                  </div>
  
                  <ul class="nav flex-column bg-white border-radius-lg p-3 listUsers shadowInput" style="height: -webkit-fill-available">
                    <li class="nav-item" id="listgroups">
                    </li>
                  </ul>
                </div>
                <div id="cards" class="flex-fill p-3 pt-0"> </div>
              </div>

              <a href="javascript:sendMessage()" id="sendMessage" class="deleteButton text-white position-fixed px-3 py-2 " title="Enviar mensaje masivo">
                <i class="fa fa-paper-plane py-1"> </i>
              </a>

            </div>

            <div class="container-fluid py-3 px-0 tab-pane show active tab-content pt-0" id="chats" style="height: 75vh;">
            
              <div class="row" style="height: 100%">
                <div class="col-12 col-md-5 col-xl-4 h-100 pe-1">
                  <div class="d-flex">
                    <div class="card my-1 mx-3 shadow w-100" >
                      <div class="d-flex align-items-center">
                        <div class="input-group">
                          <input type="text" class="form-control border-0" placeholder="Buscar..." id="search-msg">
                          <span class="input-group-text text-body border-0"><i class="fas fa-search" aria-hidden="true"></i></span>
                        </div>
                      </div>
                    </div>
                    <div style="display: flex; justify-content: center; align-items: center;">
                      <a id="btnMassiveTest" class="nav-link btn btn-danger bg-danger m-0 d-flex align-items-center justify-content-center" style="border-radius: 8px; color: white; width: 30px" href="javascript:toggleViewChat();" data-bs-toggle="tooltip" data-bs-placement="top" title="Mensajes Masivos">
                        <i class="fa fa-bell"></i> 
                      </a>
                    </div>
                  </div>
                  <ul class="list-group overflow-scroll" id="listSerch" style="height: 100%;display: none;"></ul>
                  <ul class="list-group overflow-scroll" id="lastChats" style="height: 100%;"></ul>
                </div>
                <div class="col-12 col-md-7 col-xl-8 cont-chat-history" style="display: none;">

                  <div class="card my-1 mx-2" style="height: 90px">
                    <div class="card-body px-4 py-1" style="display: flex; align-items: center">
                      <li class="list-group-item border-0 d-flex align-items-center px-0 mb-2">
                        <div class="avatar me-3 overflow-hidden">
                          <img src="/img/profile.jpg" alt="kal" class="w-100 border-radius-lg shadow" id="e-user-avatar">
                        </div>
                        <div class="d-flex align-items-start flex-column justify-content-center">
                          <h6 class="mb-0 text-sm" id="e-user-name"></h6>
                          <p class="mb-0 text-xs" id="e-user-info"></p>
                        </div>
                      </li>
                    </div>
                  </div>
                  <div class="card my-1 mx-2 cont-chat position-relative" style="height: calc(100vh - 235px); margin-bottom: 15px !important;">
                    <div id="preview" class="preview" style="display: none; opacity: 0.9;">
                      <div class="previewBorder h-100 m-4">
                        <div class="d-flex flex-column h-100">
                          <div onclick="cancelPreview(0)" class="d-flex justify-content-end pt-2 pe-3" style="cursor: pointer;"><i class="fas fa-times" style="color: white; font-size: 25px;"></i></div>
    
                          <div id="dropContainer" class="h-100 w-100" style="opacity: 0.9;">
                            <div class="h-100 w-100 d-flex justify-content-center align-items-center" style="position: relative;">
                              <h6 style="color: white; font-size: 25px;">Arrastra tus archivos acá</h6>
                              <input type="file" name="" id="imgInp2" style="width: 100%; height: 100%; position: absolute; opacity: 0;">
                            </div>
                          </div>
                          <div style="display: none; overflow: scroll;" class="mb-3">
                            <div id="imgContainer" class="h-100 d-flex justify-content-center align-items-center flex-wrap gap-3 p-5 pt-1"></div>
                          </div>
    
                        </div>
                      </div>
                    </div>
                    <div class="card-body p-3 position-relative z-index-2 overflow-scroll" id="chat-content">
                      <ul class="h-100" id="chat-history"></ul>
                    </div>
                    <div class="card-footer p-3 position-relative z-index-2">
                      <div class="card mx-2">
                        <div class="card shadow p-3">
                          <div class="audio-cont d-inline-flex justify-content-end">
                            <a href="javascript:startAudio()" class="start-audio mx-2 hideOnImgPreview btn-send bg-gradient-chat" style="padding: 10px 18px;"><i class=" fa fa-microphone"></i></a>
                            <div class="audio-controls" style="display: none; padding-top: 10px; margin-right: 5px">
                              <div class="d-inline-flex">
                                <a href="javascript:sendAudio(false)" class="p-1 align-middle"><i class="fa fa-check-circle text-success"></i></a>
                                <div class="timer-audio p-1 align-middle"><span>00:00</span></div>
                                <a href="javascript:cancelAudio()" class="p-1 align-middle"><i class="fa fa-times-circle text-danger"></i></a>
                              </div>
                            </div>
                            <div id="emoticons" style="border-top-left-radius: 1rem; border-top-right-radius: 1rem; border: solid 1px lightgray"></div>
                            <a class="btn-send bg-gradient-chat" style="cursor: pointer;">
                              <i class="fa fa-smile-o" id="open-emoticons"></i>
                              <i class="fa fa-keyboard-o" id="close-emoticons" style="margin-left: -2px;"></i>
                            </a>
                            <a href="javascript:openInputFile(0)" class="btn-send bg-gradient-chat mx-2 hideOnImgPreview">
                              
                              <label for="imgInp" class="m-0" style="cursor: pointer;">
                                <span aria-hidden="true"  style="color : white">
                                  <i class="fas fa-paperclip"></i>
                                </span>
                                <input type="file" id="imgInp" multiple style="display:none">
                              </label>
                                
                            </a>
                            <textarea id="msg-text" class="form-control border-0 me-2 ms-2 hideOnImgPreview" placeholder="Escribe tu mensaje..." rows="1" style="resize: none;"></textarea>
                            <a href="javascript:sendChat()" class="btn-send bg-gradient-chat"><i class="fa fa-paper-plane"></i></a>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>  
            </div>
          </div>

        </div> 
      </div>

      <!-- Modales -->
      <div class="modal fade" id="message" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Mensaje Masivo</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class=" my-1 mx-2 position-relative" style="height: auto;">

                <textarea id="broadcast" style="border: none; width: 100%; margin-bottom: 15px; resize: none; height: 120px; border: solid 1px lightgray; border-radius: 1rem; padding: 5px; padding-left: 10px;" rows="10" placeholder="Escribe el mensaje..."></textarea>

                <div id="previewModal" class="preview massiveMesage" style="display: none; opacity: 0.9; margin-top: 0; position: inherit !important; padding: 5px;">
                  <div class="previewBorder h-100 m-4">
                    <div class="d-flex flex-column h-100">
                      <div onclick="cancelPreview(1)" class="d-flex justify-content-end pt-2 pe-3" style="cursor: pointer;"><i class="fas fa-times" style="color: white; font-size: 25px;"></i></div>
                      <div id="dropContainerModal" class="h-100 w-100" style="opacity: 0.9;">
                        <div class="h-100 w-100 d-flex justify-content-center align-items-center" style="position: relative;">
                          <h6 style="color: white; font-size: 25px;">Arrastra tus archivos acá</h6>
                          <input type="file" name="" id="imgInp2Modal" style="width: 100%; height: 100%; position: absolute; opacity: 0;">
                        </div>
                      </div>
                      <div style="display: none; overflow: scroll;" class="mb-3">
                        <div id="imgContainerModal" class="h-100 d-flex justify-content-center align-items-center flex-wrap gap-3 p-5 pt-1"></div>
                      </div>
                    </div>
                  </div>
                </div>

                

                <div style="margin-top: 5px; display: flex">
                  <a href="javascript:startAudio()" class="start-audio mx-2 hideOnImgPreviewModal btn-send bg-gradient-chat" style="padding: 13px 18px;"><i class=" fa fa-microphone"></i></a>
                  <div class="audio-controls" style="display: none;">
                    <div style="display: flex; align-items: center; height: 100%;">
                      <div class="d-inline-flex">
                        <a href="javascript:sendAudio(true)" class="p-1 align-middle"><i class="fa fa-check-circle text-success"></i></a>
                        <div class="timer-audio p-1 align-middle"><span>00:00</span></div>
                        <a href="javascript:cancelAudio()" class="p-1 align-middle"><i class="fa fa-times-circle text-danger"></i></a>
                      </div>
                    </div>
                  </div>
                  <div id="emoticonsModal" style="border: solid 1px lightgray; border-radius: 1rem"></div>
                  <a class="btn-send bg-gradient-chat" id="emoModal" style="cursor: pointer; padding: 13px 13px !important;">
                    <i class="fa fa-smile-o" id="open-emoticonsModal" style="margin-left: 2px;"></i>
                    <i class="fa fa-keyboard-o" id="close-emoticonsModal" style="margin-left: 2px;"></i>
                  </a>
                  <a href="javascript:openInputFile(1)" class="btn-send bg-gradient-chat mx-2 hideOnImgPreviewModal" style="margin-right: 15px !important; padding: 13px 16px !important;">  
                    <label for="imgInpModal" class="m-0" style="cursor: pointer;">
                      <span aria-hidden="true"  style="color : white">
                        <i class="fas fa-paperclip"></i>
                      </span>
                      <input type="file" id="imgInpModal" multiple style="display:none">
                    </label>
                  </a>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
              <button type="button" class="btn btn-primary" onclick="broadcastMessage()">Enviar mensaje</button>
            </div>
          </div>
        </div>
      </div>

      <div class="modal " tabindex="-1" id="request" role="dialog" aria-labelledby="formatoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Nueva Solicitud</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>            
            </div>
            <div class="modal-body bg-gray-100">
    
              <div class="card">
                <div class="card-body" id="verFormatoBody"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="modal " tabindex="-1" id="event_calendar" role="dialog" aria-labelledby="formatoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" >
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="event_title"></h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>            
            </div>
            <div class="modal-body bg-gray-100">
    
              <div class="card">
                <div class="card-body" id="event_body"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- preloader -->
      <%- include('./partials/preloader.ejs') %> 
      
  </main>


  <!-- Scripts -->
  <script src="/js/core/popper.min.js"></script>
  <script src="/js/core/bootstrap.min.js"></script>
  <script src="/js/plugins/perfect-scrollbar.min.js"></script>
  <script src="/js/plugins/smooth-scrollbar.min.js"></script>
  <script src="/js/plugins/choices.min.js"></script>
  <script src="/js/soft-ui-dashboard.min.js?v=1.0.3"></script>
  <script src="/js/plugins/dragula/dragula.min.js"></script>
  <script src="/js/plugins/jkanban/jkanban.js"></script>
  <!-- <script src="/js/jquery.js"></script> -->
  <script src="/js/jquery-ui.min.js"></script>
  <script src="/js/plugins/datatables.js"></script>
  <script src="/js/plugins/chartjs.min.js"></script>
  <script src="/js/underscore-min.js"></script>
  <!-- <script src="/js/helpers.js"></script> -->
  <script src="/js/menu.js"></script>

  <!-- Socket -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.4.1/socket.io.js" integrity="sha512-MgkNs0gNdrnOM7k+0L+wgiRc5aLgl74sJQKbIWegVIMvVGPc1+gc1L2oK9Wf/D9pq58eqIJAxOonYPVE5UwUFA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="/js/plugins/moment.js"></script>
  <script src="/js/plugins/RecordRTC.min.js"></script>
  <script src="/js/sweetalert2.all.min.js"></script>
  <script src="/fonts/emoticons.js"></script>
    
  <script>
    let idChat = `<%- JSON.stringify(id_chat) %>`;
        idChat = JSON.parse(idChat);
    var firstmsg = true;
    var isUsers = false;
    var isModal = false;
    var isFiltersLoaded = false;
    var isFirstTime = true;
    var last_key;
    var user = null;
    var userSelected = null;
    var uChatsActivos = {};
    var socketListener = false;
    var fileToSend = [];
    var listUsers = [];
    var idsMessage = [];
    var users = [];
    var chat = [];
    var showHistory = false;
    var views = [];
    var timerAudio;
    var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);
    var recorder;
    var microphone;
    var fontSizeFuente = 1,fontSizeSidebar = 0.775, factor = 0.1;
    var hideMessage = (localStorage.getItem('hideMessage') == "true") ? true : false;
    const urlBase = 'https://api.pedbox.co:8590';
    const empresa = session.user.id_company;
    const usuario = session.user.user;

    let socket = io.connect('https://chat.pedbox.co:3333', { transports: ["websocket"] });

    moment.locale("es");

    //actualizar leyenda y el telefono, falta implementar la query
    $('#user-legend').dblclick(function(){
      $('#user-legend').attr("readonly",false);
    });

    $('#user-tel').dblclick(function(){
      $('#user-tel').attr("readonly",false);
    });

    $('#user-legend').blur(function(){
      $('#user-legend').attr("readonly",true);
      let info = {
        "legend": $('#user-legend').val(),
        "tel": $('#user-tel').val(),
        "user": user
      }
      console.log(info);
    });

    $('#user-tel').blur(function(){
      $('#user-legend').attr("readonly",true);
      let info = {
        "legend": $('#user-legend').val(),
        "tel": $('#user-tel').val(),
        "user": user
      }
      console.log(info);
    });

    // Abrir avatar
    $('#user-avatar').click(() => {
      var src = $('#user-avatar').attr('src');
      window.open(src, '_blank')
    })

    $('#e-user-avatar').click(() => {
      var src = $('#e-user-avatar').attr('src');
      window.open(src, '_blank')
    })

    $('#msg-text').on('keydown', e => {
      if(last_key != 16 && e.which==13){
        if ($('#msg-text').val().length > 0) {
          sendChat();
          e.preventDefault();
        }
      }
      last_key = e.keyCode;
    })

    $('#message').on('hidden.bs.modal', function(){ 
      $('#broadcast').val('');
      cancelPreview(1);
      cancelAudio();
    });

    //vaciar el modal 
    $('.modal').on('hidden.bs.modal', function(){ 
      $('#request').find('div .fields').each(function(){
        $(this).remove();
      });
    });

    $("#imgInp").change(function(){
      readURL(this,0);
      $("#preview").css("opacity", "1").show();
      $("#msg-text").show();
    });

    $("#imgInp2").change(function(){
      readURL(this,0);
      $("#preview").css("opacity", "1").show();
      $("#msg-text").show();
    });

    $("#imgInpModal").change(function(){ //modal
      readURL(this,1);
      $("#previewModal").css("opacity", "1").show()
    });

    $("#imgInp2Modal").change(function(){ //modal
      readURL(this,1);
      $("#previewModal").css("opacity", "1").show()
    });

    var enterTarget = null; //Se guarda el elemento padre para evitar problemas con el dragEnter y dragLeave en sus elementos hijos
    $(".cont-chat-history").bind("dragenter", function(e){
      enterTarget = e.target;

      $(".hideOnImgPreview").hide()
      $("#preview").fadeIn("fast");
    });

    $(".cont-chat-history").bind("dragleave", function(e){
      if (enterTarget == e.target){ //Se comprueba si esta saliendo del elemento padre
        e.stopPropagation();
        e.preventDefault();
        $("#preview").css("opacity", "0.9").fadeOut("fast")
        $("#imgContainer").html("");

        $('#dropContainer').show();
        $('#imgContainer').parent().hide();
        $(".hideOnImgPreview").show()
      };
    });

    // File copy and paste
    $("#msg-text").bind("paste", function(e){
      objDataForm = new FormData();
      var items = (event.clipboardData  || event.originalEvent.clipboardData).items;
      var fileTS = null;
      for (var i = 0; i < items.length; i++) {

        if (items[i].type.indexOf("image") === 0) {
          e.preventDefault();

          fileTS = items[i].getAsFile();
          if (fileTS !== null) {
            var reader = new FileReader();
            var fileName = fileTS.name;

            reader.onload = function(event) {
              let element = `
                <div style="max-width: 300px; max-height: 300px; color: white" class="text-center imgPreviewUpload">
                  <img src="${event.target.result}" style="max-width: 90%; max-height: 90%; opacity: 1;" alt="">
                  <p class="m-0 mt-1">${fileName}</p> 
                </div> 
              `;
              $('#imgContainer').append(element);

              $("#preview").css("opacity", "1").fadeIn("fast");
              $('#dropContainer').hide();
              $('#imgContainer').parent().show();
              $(".hideOnImgPreview").hide()
            };
            reader.readAsDataURL(fileTS);
            //objDataForm.append('attachment', fileToSend); //Append files to formData
            uploadFile(fileTS, (result) => {
              fileToSend.push({"file": fileTS, "result": result});
            })
          }
          break;
        } 

        if (items[i].type.indexOf("text") == -1 ) {
          e.preventDefault();
          let fileTS = items[i].getAsFile();
          let fileType = items[i].type.split("/");
          let file = getTypeFile(fileType[1]);
          var fileName = fileTS.name;

          loadPreviewFiles(file, fileName, 0);
          
          $("#preview").css("opacity", "1").fadeIn("fast");
          $('#dropContainer').hide();
          $('#imgContainer').parent().show();
          $(".hideOnImgPreview").hide()
          
          objDataForm.append('attachment', fileTS); 
        } 
      }
      return objDataForm;
    });

    // Cargar mensajes al llegar al tope de scroll
    var chatContent = document.getElementById('chat-content');
    chatContent.onscroll = (ev) => {
      if(ev.target.scrollTop == 0){
        var last = $('#chat-history').find('.c-msg').first().data('id');
        showHistoryChats({
          "emisor": user._id,
          "receptor": userSelected._id,
          "tipo_receptor": "usuario",
          "allUnread": true,
          "last": last,
          "limit": true
        });
      }
    }

    // Buscador de mensajes
    $('#search-msg').keyup(function() {
      $('#listSerch').html('');
      let query = $(this).val()
      if (query.length > 3) {
        $('#listSerch').html('');
        $('#listSerch').show();
        $('#lastChats').hide();
        setTimeout(showFindMessages({'query': query, 'empresa': user.empresa, 'emisor': user._id}),5000);
      } else if(query.length > 0 && query.length <= 3){
        $('#listSerch').html('');
        $('#listSerch').hide();
        $('#lastChats').show();
      }else if(query.length == 0){
        $(this).val('');
        $('#listSerch').html('');
        $('#listSerch').hide();
        $('#lastChats').show();
      }
    })

    $('#open-emoticons').click((e) => {
      $(e.target).hide();
      $('#close-emoticons').show();
      $('#emoticons').show();

      var html = '<ul>';
      for (var i in emoticosList) {
        var emojis = emoticosList[i].emojis;
        _.each(emojis, (emoji) => {
          html += '<li><span class="emoji">'+emoji.escapec_unic+'</span></li>';
        });
      }
      html += '</ul>';
      $('#emoticons').html(html);

      return false;
    });

    $('#close-emoticons').click((e) => {
      $(e.target).hide();
      $('#open-emoticons').show();
      $('#emoticons').hide();
      return false;
    });

    $(document).on('click','#emoticons ul li', (evt) => {
      var elm = $(evt.target);
      var emoji = $(elm).html();
      var text = $('#msg-text').val();
      $('#msg-text').val(text+emoji);
      $('#msg-text').focus();  
    })

    $('#open-emoticonsModal').click((e) => {
      $(e.target).hide();
      $('#close-emoticonsModal').show();
      $('#emoticonsModal').show();

      var html = '<ul>';
      for (var i in emoticosList) {
        var emojis = emoticosList[i].emojis;
        _.each(emojis, (emoji) => {
          html += '<li><span class="emoji">'+emoji.escapec_unic+'</span></li>';
        });
      }
      html += '</ul>';
      $('#emoticonsModal').html(html);
      return false;
    });

    $('#close-emoticonsModal').click((e) => {
      $(e.target).hide();
      $('#open-emoticonsModal').show();
      $('#emoticonsModal').hide();
      return false;
    });

    $(document).on('click','#emoticonsModal ul li', (evt) => {
      var elm = $(evt.target);
      var emoji = $(elm).html();
      var text = $('#broadcast').val();
      $('#broadcast').val(text+' '+emoji+' ');
      $('#broadcast').focus();  
    })

    if (hideMessage) {
      $('#hide-message').prop('checked', true);
      validateHideMessage();
    }

    $(document).on('change', '#hide-message', (evt) => {    
      let chk = $(evt.target);
      hideMessage = chk.prop('checked');
      localStorage.setItem('hideMessage', hideMessage);
      validateHideMessage();
    })

    $(document).on('change', '.inputCheckBox', function() {
      if($(this).is(":checked")) {
        parentContainerCheckbox = $(this.parentElement.parentElement.parentElement);
        parentContainerCheckbox = $(parentContainerCheckbox).find('.card-body');
        for(let j = 0; j < parentContainerCheckbox.length; j++){
          $($(parentContainerCheckbox[j]).children("ul").children("li").children("div").children("input")).prop('checked', true);
        }
      } else {
        parentContainerCheckbox = $(this.parentElement.parentElement.parentElement);
        parentContainerCheckbox = $(parentContainerCheckbox).find('.card-body');
        for(let j = 0; j < parentContainerCheckbox.length; j++){
          $($(parentContainerCheckbox[j]).children("ul").children("li").children("div").children("input")).prop('checked', false);
        }
      }
    })

    $(document).on('change', '#checkAll', function(){
      if($(this).is(":checked")) {
        $('.inputCheckBoxSend').prop('checked', true)
      }else{
        $('.inputCheckBoxSend').prop('checked', false)
      }
    })

    socket.on('connect', (evt) => {
      console.log("socket connected");
      socket.emit('login', {'usuario': usuario, 'empresa': empresa})
      if (!socketListener) suscribeSockets();
    });

    const suscribeSockets = () => {
      socketListener = true;

      // Listener Login
      socket.on('userconnect', (resp) => {
        console.log('user connected');
        if (resp) {
          if (!user) {
            user = resp;
            // setUserInfo();
            showLastMessages();
          }
        } else {
          alert('Usuario incorrecto');
        }
      })

      // Listener active connections
      socket.on('active_conections', (resp) => {
        if (resp.length) {
          resp = _.map(resp, r => `#con-${r}`).join(',')
          $('.conn').hide()
          $(resp).show()
        } else {
          $('.conn').hide()
        }
      })

      // Listener message incoming
      socket.on('new_message', (resp) => {
        if (!(resp.contenido.notificationData === undefined)) { return } // ignore if it's a notification

        new Notification(resp.alias, {
          "body": resp.contenido.texto, 
          "data": {},
          "icon": (resp.img) ? urlBase+resp.img : '/img/profile.jpg'
        });
        var countActual = $(`#count-${resp.emisor}`).html()
        var nCount = 1
        if (countActual!="") {
          nCount = parseInt(countActual)+1;
        }
        $(`#count-${resp.emisor}`)
            .show()
            .html(nCount)
        var lastEmisor = $(`.chat-cont[data-id="${resp.emisor}"]`);
        if (lastEmisor.length) {
          var newOrder = moment(resp.creado_en, "DD-MM-YYYY, HH:mm:ss").unix();
          var newTexto = ' * Notificación ';
          var diff = (moment(resp.creado_en, "DD-MM-YYYY")).diff(moment(), 'd'); 
          var newDateTime = (diff == 0) ? moment(resp.creado_en, "DD-MM-YYYY hh:mm:ss").format("hh:mm a") : diff*-1+' día(s)';

          $(lastEmisor)
            .data('order', newOrder)
            .attr('data-order', newOrder);
          sortLastChats()

          try{
            newTexto = lastMessageChat[resp.contenido.tipo](resp)
          } catch {}
          $(`.chat-cont[data-id="${resp.emisor}"]`).find('.text-preview').html(newTexto)
          $(`.chat-cont[data-id="${resp.emisor}"]`).find('.time-msg').html(newDateTime)
        } else {

        }
        if (userSelected) {
          if (userSelected._id == resp.emisor) {
            var h = resp;
            var msg = chatMessage[h.contenido.tipo](h);
            var cMsg = "c-msg mb-1 card shadow py-2 px-3 float-start";
            // var cMsg = "c-msg c-emi mb-1 card shadow py-2 px-3 float-end";
            var fecha = moment(h.creado_en, "DD-MM-YYYY, HH:mm:ss").format('dddd, DD [de] MMMM [/] YYYY');
            msg = `<br><div class="${cMsg}" data-id="${h._id}">${msg}<br><span class="hour-msg">${moment(h.creado_en, "DD-MM-YYYY, HH:mm:ss").format('h:mma')}</span></div>`;
            $('#chat-history').append(msg);
            scrollHistory()
          }
        }
      })
    }

    // Funcion para setear la información básica del usuario logueado
    const setUserInfo = () => {
      $('#user-avatar').attr('src', urlBase+user.url_img);
      $('#user-name').html(user.alias);
      $('#user-legend').val(user.leyenda);
      $('#user-tel').val(user.telefono);
      $('#user-status').val()
    }

    const showLastMessages = () => {
      socket.emit('last_messages', {"_id": user._id}, msgs => {
        $('#listSerch').html('').hide();
        $('#lastChats').show().html('');
        _.each(msgs, (m, i) => {
          $('#lastChats').append(newLastChat(m,i));
        });
        validarFuente();
        sortLastChats();
        socket.emit('find_connections', {"empresa": user.empresa});
        showCountersMessages(_.keys(msgs));
      })
    }
    
    const newLastChat = (m, i) => {
        let u = m.usuario_emisor;
        if (String(i) != m.usuario_emisor._id) u = m.usuario_receptor;
        uChatsActivos[u._id] = u;
        let img = (u.url_img) ? urlBase+u.url_img : '../assets/img/profile.jpg';
        let alias = u.alias;
        var texto = ' * Notificación ';
        try{
          texto = lastMessageChat[m.contenido.tipo](m)
        } catch {}

        let diff = (moment(m.creado_en, "DD-MM-YYYY")).diff(moment(), 'd');
        var msgtexto = '';
        let emi = m.usuario_emisor._id
        let rec = m.usuario_receptor._id
        if(emi == user._id && m.estado[emi] == 0){
          msgtexto = `<div class="status" style='color: gray; font-style: italic;'><i class="fas fa-ban">&nbsp</i>eliminaste este mensaje</div>`
        }else if(emi != user._id && m.estado[rec] == 0){
          msgtexto = `<div class="status" style='color: gray; font-style: italic;'><i class="fas fa-ban">&nbsp</i>se eliminó este mensaje</div>`
        }else{
          msgtexto = `<div class="status">${texto}</div>`
        }
        
        return `<div class="my-1 mx-3 chat-cont" style="position: relative" data-id="${u._id}" data-order="${moment(m.creado_en, "DD-MM-YYYY, HH:mm:ss").unix()}">
          <div class="px-4 py-1">
            <li class="list-group-item border-0 d-flex align-items-center px-0 mb-2 bg-transparent" onclick="setChat('${u._id}')">
              <div class="avatar me-3 col-2 overflow-hidden">
                <img src="${img}" alt="kal" class="h-200 border-radius-lg shadow">
                <i class="indicator fa fa-circle conn" id="con-${u._id}" style="color:#4CAF50"></i>
              </div>
              <div class="d-flex align-items-start flex-column justify-content-center col-8 text-truncate">
                <h6 class="mb-0 col-11 text-truncate">${alias}</h6>
                <div class="mb-0 text-xs col-11 text-truncate text-preview"><div class="hide-status">Mensaje</div>${msgtexto}</div>
              </div>
              <p style="font-size:10px" class="time-msg">${(diff == 0) ? moment(m.creado_en, "DD-MM-YYYY, hh:mm:ss").format("hh:mm a") : diff*-1+' día(s)'}</p>
              <div id="count-${u._id}" class="counters"></div>
              <div onclick='event.stopPropagation();'  class="form-check toggleCheckSelector" style="position: absolute; right: 0%; top: 60%; display: none">
                  <input class="form-check-input inputCheckBoxDelete" type="checkbox" value="">
              </div>
            </li>
          </div>
        </div>`;
      }

    // Cambio de fuente;
    const validarFuente = () => {
      if (!_.isNull(localStorage.getItem('fontSizeFuente'))) {
        fontSizeFuente = (localStorage.getItem('fontSizeFuente') != 1) ? localStorage.getItem('fontSizeFuente') : fontSizeFuente = 1;
        if(isNaN(fontSizeFuente)) { fontSizeFuente = 1}
        setFont(true, fontSizeFuente);
      }
      if (!_.isNull(localStorage.getItem('fontSizeSidebar'))) {
        fontSizeSidebar = (localStorage.getItem('fontSizeSidebar') != 0.775) ? localStorage.getItem('fontSizeSidebar') : fontSizeSidebar = 0.775;
        if(isNaN(fontSizeSidebar)) { fontSizeSidebar = 0.775}
        setFont(false, fontSizeSidebar)
      } 
    };

    const sortLastChats = () => {
      var nChats = _.sortBy($('.chat-cont'), (a,b) => {
        return $(a).data('order')
      }).reverse();
      validarFuente();
      $('#lastChats').html(nChats);
    };

    const showCountersMessages = (emisores) => {
      var obj = {'receptor': user._id, 'emisores': emisores};
      socket.emit('count_messages', obj, counters => {
        _.each(_.groupBy(counters, 'emisor'), (m,uid) => {
          $(`#count-${uid}`)
            .show()
            .html(m.length)
        })
      })
    }

    // Funcion para seleccionar un chat
    const setChat = (id, tab) => {
        if($('#listSerch').attr('display') != 'none'){
          $('#listSerch').html('');
          $('#listSerch').hide();
          $('#lastChats').show();
        }
        socket.emit('read_messages', {'receptor': user._id, 'emisor': id})
        let chatCont = $(`.chat-cont[data-id="${id}"]`);
        console.log(chatCont);
        $(`#count-${id}`)
          .hide()
          .html('');

        $('#chat-history').html('');

        // Buscar información del usuario
        console.log(uChatsActivos[id]);
        userSelected = uChatsActivos[id] ? uChatsActivos[id] : _.find(users, u => u._id == id);
        let img = (userSelected.url_img) ? urlBase+userSelected.url_img : '../assets/img/profile.jpg';

        let leyenda = (userSelected.leyenda) ? ` <br><i style="text-style: italic;font-weight: 100" title="Leyenda">"${userSelected.leyenda}"</i>` : '';
        let info = '';
        if (userSelected.grupo && userSelected.subgroup) {
          info = `${userSelected.grupo} - ${userSelected.subgrupo} `;
        }

        if(userSelected.telefono) info += ` - <b>${userSelected.telefono}</b>`;

        // Seleccionar usuario en lista de chats activos
        $('.chat-cont').removeClass('card');
        chatCont.addClass('card');

        // Setear información de usuario
        $('#e-user-avatar').attr('src', img);
        $('#e-user-name').html(userSelected.alias+leyenda);
        $('#e-user-info').html(info);

        $('.cont-chat-history').show();

        showHistoryChats({
          "emisor": user._id,
          "receptor": id,
          "tipo_receptor": "usuario",
          "allUnread": true,
          "limit": true
        })
        validarFuente();
        
        if(tab) {
          $(".main-content").scrollTop(0);
          document.getElementById('chats-tab').click()
        }
      }

      const showHistoryChats = (input) => {
        if (!showHistory) {
          showHistory = true;
          socket.emit('history', input, (resp) => {
            console.log(resp);
            showHistory = false;
            var lastDate = '';
            chat = resp.history;
            _.each(resp.history, (h, i) => {
              if(h.emisor == user._id && h.estado[user._id] != 0){
                var menu = `<div class="menu" id="m-${h._id}" style="display: none">
                              <button type="button" class="dropdown-toggle menu float-right" style="color: white;" data-bs-toggle="dropdown" aria-expanded="false">
                              </button>
                              <ul class="dropdown-menu px-2 py-3" aria-labelledby="dropdownMenuButton">
                                <li><a class="dropdown-item border-radius-md" href="javascript: deleteMsg(${h._id}, ${h.receptor})">Eliminar para mi</a></li>
                                <li><a class="dropdown-item border-radius-md" href="javascript: deleteMsgAll(${h._id}, ${h.emisor}, ${h.receptor})">Eliminar para todos</a></li>
                                <!--<li><a class="dropdown-item border-radius-md" href="#">Reenviar</a></li>-->
                              </ul>
                            </div>`
              }else{
                if(h.emisor == user._id){
                  var clase = `<button type="button" class="dropdown-toggle menu float-righ" style="color: white;" data-bs-toggle="dropdown" aria-expanded="false">
                              </button>`
                }else{
                  var clase = `<button type="button" class="dropdown-toggle menu float-right" data-bs-toggle="dropdown" aria-expanded="false">
                              </button>`
                }
                var menu = `<div class="menu" id="m-${h._id}" style="display: none">
                              ${clase}
                              <ul class="dropdown-menu px-2 py-3" aria-labelledby="dropdownMenuButton">
                                <li><a class="dropdown-item border-radius-md" href="javascript: deleteMsg(${h._id}, ${h.receptor})">Eliminar para mi</a></li>
                                <!--<li><a class="dropdown-item border-radius-md" href="#">Reenviar</a></li>-->
                              </ul>
                            </div>`
              }
              var msgtexto = '';
              let emi = h.emisor
              let rec = h.receptor
              if(emi == user._id && h.estado[emi] == 0){
                var msg = `<div><i class="fas fa-ban">&nbsp</i><i>eliminaste este mensaje</i></div>`
              }else if(emi != user._id && h.estado[rec] == 0){
                var msg = `<div><i class="fas fa-ban">&nbsp<i>se eliminó este mensaje</i></i></div>`
              }else{
                var msg = chatMessage[h.contenido.tipo](h);
              }
                var cMsg = "c-msg mb-1 card shadow py-2 px-3 float-start";
                if (user._id == h.emisor) cMsg = "c-msg c-emi mb-1 card shadow py-2 px-3 float-end";
                var fecha = moment(h.creado_en, "DD-MM-YYYY, HH:mm:ss").format('dddd, DD [de] MMMM [/] YYYY');
                var fechaDiv = '';
                fecha = (fecha != moment().format('dddd, DD [de] MMMM [/] YYYY')) ? fecha : moment().format('dddd, DD [de] MMMM [/] YYYY');
                var next = chat[i+1];
                if(next) lastDate = moment(next.creado_en, "DD-MM-YYYY, HH:mm:ss").format('dddd, DD [de] MMMM [/] YYYY')
                if (lastDate != fecha && lastDate != ''){ fechaDiv = `<div class="badge text-dark date-msg">${fecha}</div>`;} 
                lastDate = fecha;
                msg = `<br>${fechaDiv}<div class="${cMsg}" onmouseover="show(${h._id})" onmouseout="hide(${h._id})" data-id="${h._id}">${msg}${menu}<span class="hour-msg">${moment(h.creado_en, "DD-MM-YYYY, HH:mm:ss").format('h:mma')}</span></div>`;
                $('#chat-history').prepend(msg);
            })
              validarFuente();
              if (!resp.last) scrollHistory();
          });
        }
      }

    const chatMessage = {
      "attached": msg => { 
        var mensaje = '';
        for (var att of msg.contenido.url) {
          // ID
          var id = moment(msg.creado_en, "DD-MM-YYYY, HH:mm:ss").unix();
          // Imagenes
          if (['jpg','jpeg','gif','png'].indexOf(att.ext) > -1) mensaje+=`<a href="${urlBase+att.url}" target="_blank"><img src="${urlBase+att.url}" style="max-width:350px" /></a><br><a href="${urlBase+att.url}" download="${att.name}"><i class="fa fa-download"></i> Descargar Imagen</a><br><div style="clear: both">${msg.contenido.texto.toString().replace(/<[^>]*>?/g, '')}</div>`;
          // PDF
          if ('pdf' == att.ext) mensaje+=`<a href="${urlBase+att.url}" target="_blank"><img src="/img/icon-pdf.png" style="width: 120px"><br>${att.name}</a>`;
          // Microsoft Excel
          if (['xlsx','xls'].indexOf(att.ext) > -1) mensaje+=`<a href="${urlBase+att.url}" target="_blank"><img src="/img/icon-xlsx.png" style="width: 120px"><br>${att.name}</a>`;
          // Microsoft Word
          if (['doc','docx'].indexOf(att.ext) > -1) mensaje+=`<a href="${urlBase+att.url}" target="_blank"><img src="/img/icon-docx.png" style="width: 120px"><br>${att.name}</a>`;
          // WinZip
          if ('zip' == att.ext) mensaje+=`<a href="${urlBase+att.url}" target="_blank"><img src="/img/icon-zip.png" style="width: 120px"><br>${att.name}</a>`;
          // Audios
          if(['ogg','mp3','3gp','blob'].indexOf(att.ext) > -1) mensaje+=`<audio class="player" id="audio${id}" data-id="${id}" controls controlsList="nodownload"><source src="${urlBase+att.url}" type="audio/ogg" /></audio>`;
        }
        return mensaje || att.ext+' 📎 archivo';
      },
      "calendar": msg =>  {
        var begin = moment(msg.contenido.texto.info.date_begin.replace(/(Z)|(\s)/g, ""));
        var hour_begin = msg.contenido.texto.info.hour_begin.split(":");
        hour_begin = hour_begin[0]+":"+hour_begin[1];
        var end = moment(msg.contenido.texto.info.date_end.replace(/(Z)|(\s)/g, ""));
        var hour_end = msg.contenido.texto.info.hour_end.split(":");
        hour_end = hour_end[0]+":"+hour_end[1];
        mensaje = `<div class="evt-calendar">`
            + `<div class="c-date">`
            + `<div class="c-cont-date">`
            + `<span class="c-month">${begin.format('MMM')}</span>`
            + `<span class="c-day">${begin.format('DD')}</span>`
            + `<span class="c-day-n">${begin.format('ddd')}</span>`
            + `</div>`
            + `<a href="javascript:openEvent(${msg._id})" class="lnk-event" style="font-size: 14px; margin-top: 18px"><i class="fa fa-info-circle"></i> Ver Evento</a><br>`
            + `</div>`
            + `<div class="c-info">`
            + `<h3>${msg.contenido.texto.info.subject}</h3>`
            + `<p class="ci-info" style="font-size: smaller;"><b>Inicio: </b>${begin.format('ddd DD MMM YYYY')} ${hour_begin}</p>`
            + `<p class="ci-info" style="font-size: smaller;"><b>Fin: </b>${end.format('ddd DD MMM YYYY')} ${hour_end}</p>`
            + `<p class="ci-info" style="margin-bottom: 12px; font-size: smaller"><b>Lugar: </b>${msg.contenido.texto.info.place}</p>` 
            + `<div>`;
            let status = _.find(msg.contenido.texto.activitie_user, s => s.id_user == user._id);
            if(msg.contenido.texto.status != 0 && status.status == 1 && msg.contenido.texto.status != 4 && msg.contenido.texto.status != 5 && msg.contenido.texto.info.id_user_register != user._id){
            mensaje += `<button type="button" class="btn bg-gradient-chat" style="font-size: small; float: right; padding: 8px" onclick="javascript: calendarRequest(2,${msg.contenido.texto.id}, ${msg.contenido})">Aceptar</button>`
            + `<a href="javascript: calendarRequest(3,${msg.contenido.texto.id}, ${msg.contenido})" style="color: red; float: right; margin-right: 25px">Rechazar</a>`
            + `</div>`
            + `</div>`
            + `</div>`;
          }else {
            mensaje += `</div>`
              + `</div>`
              + `</div>`;
          } 
          return mensaje;
        },  //' 📅 Invitación a Eventos',
      "formatRequest": msg => {
        var mensaje = `<p onclick="formatRequest('${msg.contenido.texto.id}')" style="cursor: pointer;"> 🖥 &nbsp&nbsp${msg.contenido.texto.subject} <b>#${msg.contenido.texto.id}</b></p><hr style="margin: 0;"><p>`;
        if (msg.contenido.texto.fields) {
          mensaje += '<p style="padding: 10px;margin:0px;">';

          _.each(msg.contenido.texto.fields, (o) => {
              mensaje += '<b>'+_.keys(o)[0]+'</b>: <span style="font-weight: 100;">'+_.values(o)[0]+'</span><br/>';
          })
        }
        return mensaje;
      },
      "process": msg => ' 🖥  Nueva Incidencia',
      "sos": msg => ` 🔔 SOS - ${msg.contenido.texto}`,
      "text": msg => `${getEmojiChars(msg.contenido.texto)}`,
      "task": msg => ' 🔔 Helpdesk',
      "to_do_list": msg => ' 📚 Tarea',
    }

    const getEmojiChars = (message) => {
      if(typeof message == 'string'){
        //elimino repetidos
        let emojis = message.match(/\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff]/g)
          
        //consulto si hay letras o numeros para no poner la clase de solo emoji
        var charts = message.match(/[0-9a-zA-Z]/g)
        if(emojis){
          emojis = _.uniq(emojis)
          var ms = `<div style="display: flex; flex-direction: row; align-items: center; ${charts ? '' : 'margin-bottom: 5px'}">`
          for (let index = 0; index < emojis.length; index++) {
            var i = emojis[index];
            if(!charts){
              message = message.split(i).join(`<span class='emoji only-emoji'>${i}</span>`);
            }
          }
          ms += message + `</div>`
        }
      } 
      if(ms){return ms}
      return message;
    }

    const scrollHistory = () => {
      $("#chat-history").parent().scrollTop($('#chat-history').prop("scrollHeight"));
    }

    // Función para enviar mensajes
    const sendChat = () => {
      let emisor = user._id;
      let receptor;
      let tipoReceptor;

      if (userSelected) {
        receptor = userSelected._id;
        tipoReceptor = "usuario";
      }
      var texto = nl2br($('#msg-text').val().replace(/^\s+|\s+$/g, ""));

      // Parámetros básicos de mensaje
      var type_msg = "text";
      var has_files = false;
      var files = [];

      // Validar mensajes adjuntos
      if (fileToSend.length > 0) {
        type_msg = "attached";
        has_files = true;
        files = _.map(fileToSend, (f) => {
            var ext = f.result.original_name.split('.').pop();
            var n = {
                "url":f.result.url_file.replace('/public',''),
                "ext":ext,
                "typeFile":getTypeFile(ext),
                "name":f.result.original_name,
            };
            return n;
        });
      }

      var msg_data = {
        "alias": user.alias,
        "img": user.url_img,
        "emisor": emisor, 
        "receptor": receptor, 
        "leido_por": [], 
        "recibido_por": [], 
        "empresa": user.empresa, 
        "unread": {},
        "creado_en": moment().format("DD-MM-YYYY, HH:mm:ss"),
        "contenido": { 
          "texto": texto, 
          "tipo": type_msg, 
          "url": files 
        }, 
        "tipo_receptor": tipoReceptor, 
        "estado": {} 
      };

      // Objeto para lectura de mensajes
      msg_data.unread[emisor] = 0;
      msg_data.unread[receptor] = 0;

      // Objeto de estado
      msg_data.estado[receptor] = 1;
      msg_data.estado[emisor] = 1;

      if ($('.chat-cont[data-id="'+receptor+'"]').hasClass('card')) {
        var nOrder = new Date().getTime();
        $('.chat-cont[data-id="'+receptor+'"]')
          .attr('data-order', new Date().getTime())
          .data('order', nOrder)

        var texto = ' * Notificación ';
        try{
          texto = lastMessageChat[type_msg](msg_data);
        } catch {}
        
        $('.chat-cont[data-id="'+userSelected._id+'"]').find('.text-preview').html(texto);
        $('.chat-cont[data-id="'+userSelected._id+'"]').find('.time-msg').html(moment().format('h:mma'));
        sortLastChats();

        var msg = chatMessage[type_msg](msg_data);
        var cMsg = "c-msg c-emi mb-1 card shadow py-2 px-3 float-end";
        msg = `<div class="${cMsg}">${msg}<span class="hour-msg">${moment().format('h:mma')}</span></div>`;
        $('#chat-history').append(msg);
        scrollHistory();
      }

      console.log(msg_data)

      socket.emit('new_message', msg_data, (result) => { });
      $('#msg-text').val('');
      cancelPreview(0);
    }

    const cancelPreview = (isModal) =>{
      if(isModal){
        $('#dropContainerModal').show();
        $('#imgContainerModal').parent().hide();
        $("#imgContainerModal").html("");
        $(".hideOnImgPreviewModal").show();
        $("#emoModal").show();
        $("#previewModal").css("opacity", "0.9").fadeOut("fast")
        objDataForm = new FormData(); //Clean form-data
      }else{
        $('#dropContainer').show();
        $('#imgContainer').parent().hide();
        $("#imgContainer").html("");
        $(".hideOnImgPreview").show()
        $("#preview").css("opacity", "0.9").fadeOut("fast")
        objDataForm = new FormData(); //Clean form-data
      }
      fileToSend = [];
    }

    const nl2br = (str, is_xhtml) => {
      if (typeof str === 'undefined' || str === null) {
        return '';
      }
      var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';
      return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');
    }

    const showFindMessages = (input) => {
      socket.emit('find_messages', input, (msgs) => {
        $('#listSerch').html('');
        if (msgs) {
          _.each(msgs, m => {
            let reg = new RegExp($('#search-msg').val().split(' ').join('|'));
            let u = m.usuario_emisor;
            let img = (u.url_img) ? urlBase+u.url_img : '/img/profile.jpg';
            let alias = u.alias;
            let texto = chatMessage[m.contenido.tipo](m).replace(reg, s => `<b style="color: #ea0606 !important">${s}</b>`)
            let diff = (moment(m.creado_en, "DD-MM-YYYY")).diff(moment(), 'd'); 

            var msgSearch = `
              <div class="my-1 mx-3 chat-cont" style="position: relative" data-id="${u._id}" data-order="${moment(m.creado_en, "DD-MM-YYYY, HH:mm:ss").unix()}">
                <div class="px-4 py-1">
                  <li class="list-group-item border-0 d-flex align-items-center px-0 mb-2 bg-transparent" onclick="setChat('${u._id}')">
                    <div class="avatar me-3 col-2 overflow-hidden">
                      <img src="${img}" alt="kal" class="h-200 border-radius-lg shadow">
                      <i class="indicator fa fa-circle conn" id="con-${u._id}" style="color:#4CAF50"></i>
                    </div>
                    <div class="d-flex align-items-start flex-column justify-content-center col-8">
                      <h6 class="mb-0 col-11 text-truncate">${alias}</h6>
                      <div class="mb-0 text-xs col-11 text-preview">${texto}</div>
                    </div>
                    <p style="font-size:10px" class="time-msg">${(diff == 0) ? moment(m.creado_en, "DD-MM-YYYY, hh:mm:ss").format("hh:mm a") : diff*-1+' día(s)'}</p>
                    <div onclick='event.stopPropagation();'  class="form-check toggleCheckSelector" style="position: absolute; left: -5%; display: none">
                        <input class="form-check-input inputCheckBoxDelete" type="checkbox" value="">
                      </div>
                  </li>
                </div>
              </div>
            `;
            
            $('#listSerch').append(msgSearch);
          })
        }
      })
    }

    var objDataForm 
    const readURL = (input, isModal) => {      
      objDataForm = new FormData();

      if (input.files && input.files[0]) {
        for (var i = 0; i < input.files.length; ++i) {
          const fileName = input.files[i].name;
          const fileType = getTypeFile(fileName.split('.').pop());

          if(fileType == "image"){
            // var blob = input.files[i]; 
            var reader = new FileReader();
            reader.onload = function (e) {
              let element = `
                <div style="max-width: 300px; max-height: 300px; color: white" class="text-center imgPreviewUpload">
                  <img src="${e.target.result}" style="max-width: 90%; max-height: 90%; opacity: 1;" alt="">
                  <p class="m-0 mt-1">${fileName}</p>   
                </div> 
              `;
              (isModal) ? $('#imgContainerModal').append(element): $('#imgContainer').append(element);
            }
            reader.readAsDataURL(input.files[i]); 
            uploadFile(input.files[i], (result) => {
              fileToSend.push({"file": input.files[i], "result": result});
            })
          } else {
            loadPreviewFiles(fileType, fileName, isModal)
            uploadFile(input.files[i], (result) => {
              fileToSend.push({"file": input.files[i], "result": result});
            }) //si no es imagen
          }

          objDataForm.append('attachment', input.files[i]); //Append files to formData
        }
      }
      input.value = '';
      
      if(isModal){
        $('#dropContainerModal').hide();
        $('#imgContainerModal').parent().show();
        $(".hideOnImgPreviewModal").hide()
        $("#emoModal").hide();
      } else {
        $('#dropContainer').hide();
        $('#imgContainer').parent().show();
        $(".hideOnImgPreview").hide()
      } 
      return objDataForm
    };

    const getTypeFile = (ext) => {
      switch (ext) {
        case 'jpg': case 'jpeg': case 'gif': case 'png':
          return 'image';
        case 'mp4': case 'webm': case 'ogv':
          return 'video';
        case 'mp3': case 'wav': case 'ogg': case 'blob': case 'mpeg':
          return 'audio';
          case 'pdf':
          return 'pdf';
        case 'doc': case 'docx': case 'vnd.openxmlformats-officedocument.wordprocessingml.document':
          return 'doc';
        case 'xlsx': case 'xls': case 'vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          return 'xls';
        default:
          return 'file';
      }
    }

    // Funciones previsualización de archivos
    const loadPreviewFiles = function (fileType, fileName,isModal) {
      let element = `
      <div style="max-width: 300px; max-height: 300px; color: white" class="text-center imgPreviewUpload">
        ${icoPreview[fileType]}
        <p class="m-0 mt-1">${(fileName ? fileName : "")}</p> 
      </div>`; 
      (isModal) ? $('#imgContainerModal').append(element) : $('#imgContainer').append(element);
    }

    const icoPreview = {
      "file": '<i class="fas fa-file-video fa-7x" style="color: white; width: 100%; height: 100%"></i>',
      "audio": '<i class="fas fas fa-file-audio fa-7x" style="color: white; width: 100%; height: 100%"></i>',
      "pdf": '<img src="/img/icon-pdf.png" style="width: 120px" />',
      "doc": '<img src="/img/icon-docx.png" style="width: 120px">',
      "docx": '<img src="/img/icon-docx.png" style="width: 120px">',
      "xls": '<img src="/img/icon-xlsx.png" style="width: 120px">',
      "xlsx": '<img src="/img/icon-xlsx.png" style="width: 120px">'
    }

    // Cargar archivos al servidor
    const uploadFile = (file, cb) => {
      var objDataForm = new FormData();
      objDataForm.append('attachment', file);
      objDataForm.append('typeAttached', 'attached');
      
      $.ajax({
        url: urlBase+'/upload',
        data: objDataForm,
        cache: false,
        contentType: false,
        processData: false,
        method: 'POST',
        type: 'POST'
      })
      .done((result) => {
        cb(result);
      })
    }

    const openInputFile = (isModal) =>{
      if (isModal) return $("#imgInpModal").click();
      return $("#imgInp").click();
    };

    const stopTimerAudio = () => {
      clearInterval(timerAudio);
      $('#broadcast').show();
    }

    const startAudio = () => {
      startTimerAudio();
      $('#broadcast').hide();
      $('.start-audio').fadeOut('fast', () => {
        $('.audio-controls').fadeIn('fast', () => {
          startRecordAudio();
        });
      });
    }

    // Iniciar contador de envío de audio
    const startTimerAudio = () => {
      $('#broadcast').hide();
      $('#broadcast').val('');
      $('.timer-audio>span').html('00:00');
      var start = new Date;    
      
      clearInterval(timerAudio);
      timerAudio = setInterval(() => {
        var total_seconds = (new Date - start) / 1000;   
      
        var minutes = Math.floor(total_seconds / 60);
        total_seconds = total_seconds % 60;
      
        var seconds = Math.floor(total_seconds);
        minutes = pretty_time_string(minutes);
        seconds = pretty_time_string(seconds);

        var currentTimeString = minutes + ":" + seconds;
      
        $('.timer-audio>span').html(currentTimeString);
      }, 1000);
    }

    // Iniciar grabación de audio
    const startRecordAudio = () => {
      if (!microphone) {
        captureMicrophone(function(mic) {
          microphone = mic;
          startRecordAudio();
        });
        return;
      }

      var options = {
        type: 'audio',
        numberOfAudioChannels: isEdge ? 1 : 2,
        checkForInactiveTracks: true,
        bufferSize: 16384,
        // recorderType: RecordRTC.StereoAudioRecorder, // force for all browsers
        // numberOfAudioChannels: 2
      };

      if(navigator.platform && navigator.platform.toString().toLowerCase().indexOf('win') === -1) {
        options.sampleRate = 48000; // or 44100 or remove this line for default
      }

      if(recorder) {
        recorder.destroy();
        recorder = null;
      }

      recorder = RecordRTC(microphone, options);
      recorder.startRecording();
    }

    const pretty_time_string = (num) => {
      return ( num < 10 ? "0" : "" ) + num;
    }

    const cancelAudio = () => {
      stopTimerAudio();
      $('.audio-controls').fadeOut('fast', () => {
        $('.start-audio').fadeIn('fast', () => {
          if(microphone) {
            microphone.stop();
            microphone = null;
          }

          if(recorder) {
            recorder.destroy();
            recorder = null;
          }
        });
      })
    }

    /* Funciones para grabar Audio */
    const captureMicrophone = (callback) => {
      if(microphone) {
        callback(microphone);
        return;
      }

      if(typeof navigator.mediaDevices === 'undefined' || !navigator.mediaDevices.getUserMedia) {
        alert('No es poisble grabar audio.');
        if(!!navigator.getUserMedia) alert('No es posible grabar audio.');
      }

      navigator.mediaDevices.getUserMedia({
        audio: isEdge ? true : {
          echoCancellation: false
        }
      }).then(function(mic) {
        callback(mic);
      }).catch(function(error) {
        alert('Unable to capture your microphone. Please check console logs.');
        console.error(error);
      });
    };

    const replaceAudio = (src) => {
      var newAudio = document.createElement('audio');
      newAudio.controls = true;

      if(src) {
        newAudio.src = src;
      }
    };

    const sendAudio = (f) => {
      isModal = f
      stopTimerAudio();
      $('.audio-controls').fadeOut('fast', () => {
        $('.start-audio').fadeIn('fast', () => {
          recorder.stopRecording(stopRecordingCallback);
        });
      })
    };

    const stopRecordingCallback = () => {
      var newAud = recorder.getBlob();
      replaceAudio(URL.createObjectURL(newAud));
      
      uploadFile(newAud, (result) => {
        fileToSend.push({"file": newAud, "result": result});
        (isModal) ? broadcastMessage() : sendChat();
      })
    };

    const broadcastMessage = () => {
        var texto = nl2br($('#broadcast').val().replace(/^\s+|\s+$/g, ""));
        _.each(idsMessage, d => {
          let emisor = user._id;
          let receptor = d;
          let tipoReceptor = "usuario";
        
          // Parámetros básicos de mensaje
          var type_msg = "sos";
          var has_files = false;
          var files = [];

          // Validar mensajes adjuntos
          if (fileToSend.length > 0) {
            type_msg = "attached";
            has_files = true;
            files = _.map(fileToSend, (f) => {
                var ext = f.result.original_name.split('.').pop();
                var n = {
                    "url":f.result.url_file.replace('/public',''),
                    "ext":ext,
                    "typeFile":getTypeFile(ext),
                    "name":f.result.original_name,
                };
                return n;
            });
          }
          if(texto !== "" || fileToSend.length > 0){
          var msg_data = { 
            "alias": user.alias,
            "img": user.url_img,
            "emisor": emisor, 
            "receptor": receptor, 
            "leido_por": [], 
            "recibido_por": [], 
            "empresa": user.empresa, 
            "unread": {},
            "creado_en": moment().format("DD-MM-YYYY, HH:mm:ss"),
            "contenido": { 
              "texto": texto, 
              "tipo": type_msg, 
              "url": files 
            }, 
            "tipo_receptor": tipoReceptor, 
            "estado": {} 
          };

          // Objeto para lectura de mensajes
          msg_data.unread[emisor] = 0;
          msg_data.unread[receptor] = 0;

          // Objeto de estado
          msg_data.estado[receptor] = 1;
          msg_data.estado[emisor] = 1;
          if ($('.chat-cont[data-id="'+parseInt(d)+'"]')) {
            console.log('entro');
            var nOrder = new Date().getTime();
            $('.chat-cont[data-id="'+parseInt(d)+'"]')
              .attr('data-order', new Date().getTime())
              .data('order', nOrder)

            var textof = ' * Notificación ';
            try{
              textof = lastMessageChat[type_msg](msg_data);
            } catch {}
            console.log(d, textof);
            $('.chat-cont[data-id="'+parseInt(d)+'"]').find('.text-preview').html(textof);
            $('.chat-cont[data-id="'+parseInt(d)+'"]').find('.time-msg').html(moment().format('h:mma'));
            sortLastChats();

            var msg = chatMessage[type_msg](msg_data);
            var cMsg = "c-msg c-emi mb-1 card shadow py-2 px-3 float-end";
            msg = `<div class="${cMsg}">${msg}<span class="hour-msg">${moment().format('h:mma')}</span></div>`;
            $('#chat-history').append(msg);
            scrollHistory();
          }

            socket.emit('new_message', msg_data, (result) => { });
          }
        });
          $('#broadcast').val('');
          $('#message').modal('hide');
          $(".inputCheckBoxSend").prop('checked', false);
          cancelPreview(1);
      }

    const lastMessageChat = {
      "attached": msg => {
        if (['jpg','jpeg','gif','png'].indexOf(msg.contenido.url[0].ext) > -1) {
          return `<span class="badge badge-lg bg-gradient-success"><i class="fa fa-file-image-o"></i> Imagen</span> ${msg.contenido.texto.toString().replace(/<[^>]*>?/g, '')}`;
        }
        if (['ogg','mp3','3gp','blob'].indexOf(msg.contenido.url[0].ext) > -1) {
          return '<span class="badge badge-lg bg-success"><i class="fa fa-music"></i> Audio</span>';  
        }
        return '<span class="badge badge-lg bg-success"><i class="fa fa-file-o"></i> Archivo</span><br><br>';
      },
      "calendar": msg => ' <i class="fa fa-calendar-o"></i> Evento',
      "formatRequest": msg => '<span class="badge badge-lg bg-gradient-dark"><i class="fa fa-bell"></i> Nueva Solicitud</span>',
      "process": msg => '<i class="fa fa-bell"></i> Nueva Incidencia',
      "sos": msg => `<span class="badge badge-lg bg-gradient-danger"><i class="fa fa-bell"></i> <b>SOS</b></span> - ${msg.contenido.texto.toString().replace(/<[^>]*>?/g, '')}`,
      "text": msg => `${msg.contenido.texto.toString().replace(/<[^>]*>?/g, '')}`,
      "task": msg => '<i class="fa fa-bell"></i> Helpdesk',
      "to_do_list": msg => '<i class="fa fa-list-ol"></i> Tarea',
    };

    const showUsersLists = (user) => {
      views = [];
      socket.emit('users_list', user, (lUsers) => {
        listUsers = _.groupBy(_.sortBy(lUsers, 'grupo'), 'grupo');
        console.log(listUsers)
        //var htmlUsers = '';
        $('#cards').append(`
          <div class="input-group">
            <input type="text" class="form-control border-0 shadowInput" placeholder="Buscar..." id="buscar" onkeyup="buscar()">
            <span class="input-group-text text-body border-0"><i class="fas fa-search" aria-hidden="true"></i></span>
          </div><br>`
        );
        $('#cards').append(`
          <div class="form-check toggleCheckSend" style="float: left; margin-left: 15px; display: none">
              <input id="checkAll" class="form-check-input inputCheckBoxSend" type="checkbox" value="">
          </div>
          <h6 style= "float: left">Seleccionar todos</h6><br>
        `) 
        _.each(listUsers, (lu, i) => {  //href
          i = (i.length>0) ? i : 'Grupo sin asignar'
          var groups = `<a class="nav-link text-body" data-scroll="" data-bs-toggle="collapse" href="#${i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')}">
            <span class="text-sm"><b><i class="fa fa-group" style="margin-right: 10px"></i>${i}</b></span>
            </a>
            <ul class="nav ms-4 ps-3 collapse" id="${i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')}" style="max-height: 450px; overflow: scroll;"></ul>`
          $('#listgroups').append(groups);
          _.each(_.groupBy(lu, 'subgrupo'), (u, j) => {
            var subgroup = `<li class="nav-item" style="width: 100%">
                <a class="nav-link text-sm" style="color: gray; cursor: pointer;" onClick="newFilter('${i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')}${j.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')}')"> 
                  <span class="sidenav-normal"><i class="fa fa-group" style="margin-right: 10px"></i>${j}</span>
                </a>
              </li>`
            views.push(i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')+j.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,''))
            var idi = i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'');
            $(`#${idi}`).append(subgroup);
            var subGroup = `<div class="card mt-4" id="${i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')}${j.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')}View">
              <div class="card-header" style="padding: 1rem 1.5rem !important;">
                <div class="form-check toggleCheckSend" style="float: left; margin-left: 15px; display: none">
                    <input class="form-check-input inputCheckBoxSend inputCheckBox" type="checkbox" value="">
                  </div>
                  <h5 style= "float: left">${i+" - "+j}</h5>                      
              </div>
            </div>`;
              $('#cards').append(subGroup);
              _.each(u, a =>{
                let info = '';
                if (a.grupo && a.subgrupo) {
                  info = `${a.grupo} - ${a.subgrupo} `;
                }

                if(a.telefono) info += ` - <b>${a.telefono}</b>`;
                if($('#list_group').attr('aria-selected') === 'true'){
                  var card = `<div style="padding: 0rem !important;" class="card-body pt-0" id="u-${a._id}" style="cursor: pointer;" onClick="setChat(${a._id}, 1)">` 
                }else{
                  var card = `<div style="padding: 0rem !important;" class="card-body pt-0" id="u-${a._id}" style="cursor: pointer;">`
                }
                card += `<ul>
                          <li style="padding: 0rem 1rem !important;" class="list-group-item border-0 d-flex align-items-center px-0 mb-2 bg-transparent">
                            <div class="form-check toggleCheckSend" style="float: left; margin-left: 15px; display: none">
                                    <input class="form-check-input inputCheckBoxSend" type="checkbox" value="">
                                  </div>
                            <div class="avatar me-3 col-2 overflow-hidden">
                              <img src="${(a.url_img && a.url_img != null) ? urlBase+a.url_img : '/img/profile.jpg'}" alt="kal"
                                class="h-200 border-radius-lg shadow" href="#chats">
                            </div>
                            <div class="d-flex align-items-start flex-column justify-content-center col-8 text-truncate">
                              <h6 class="mb-0 text-sm col-11 text-truncate">${a.alias}</h6>
                              <p class="mb-0 text-xs col-11 text-truncate text-preview">${info}</p>
                            </div>
                          </li>
                        </ul>
                      </div>`
                  var idj = i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')+j.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'');
                $(`#${idj}View`).append(card); 
              });
          })            
        })
        if(isFirstTime){
          toggleSendMessage();
        }
      })
      console.log(views);
    }

    //enviar mensaje masivo
    const toggleSendMessage = () => {
      $(".toggleCheckSend").fadeIn("fast");
      $("#sendMessage").fadeIn("fast");
    }

    const toggleViewChat = () => {
      if ($("#chats").is(":visible") == true) {
        $("#chats").hide();
        $("#btnMassiveTest").hide();
        $("#users").show();
        $("#btnChats").show();

        if (!isFiltersLoaded) {
          isFiltersLoaded = true;
          showUsersLists(user);
        }
      } else {
        $("#users").hide();
        $("#btnChats").hide();
        $("#chats").show();
        $("#btnMassiveTest").show();
      }
    }

    //función para filtrar los grupos y subgrupos
    const newFilter = (id) => {
      for(i=0; i<views.length; i++){
        $(".main-content").scrollTop(0);
        if(views[i] != id){
          $('#'+views[i]+'View').addClass('noTiene');
        }else{
          $('#'+views[i]+'View').removeClass('noTiene');
        }
      }
    }

    const deleteFilter = () => {
      for(i=0; i<views.length; i++){
        $('#'+views[i]+'View').removeClass('noTiene');
      }
    }

    const sendMessage = () => {
      let checkBoxs = $(".inputCheckBoxSend");
      idsMessage = [];
      for (let i = 0; i < checkBoxs.length; i++) {
        if (checkBoxs[i].checked) {
          if($(checkBoxs[i].parentElement.parentElement.parentElement.parentElement).hasClass('card-body')){
            dataId = $(checkBoxs[i].parentElement.parentElement.parentElement.parentElement).attr("id");
            if(!idsMessage.includes(dataId.substr(2,dataId.length-1))){idsMessage.push(dataId.substr(2,dataId.length-1))} 
          }else{
            parentContainerCheckbox = checkBoxs[i].parentElement.parentElement.parentElement;
            parentContainerCheckbox = $(parentContainerCheckbox).find('.card-body');
            for(let j = 0; j < parentContainerCheckbox.length; j++){
              dataId = $(parentContainerCheckbox[j]).attr("id");
              if(!idsMessage.includes(dataId.substr(2,dataId.length-1))){idsMessage.push(dataId.substr(2,dataId.length-1))}
            }
          } 
        }
      }

      if(idsMessage.length >= 1){
        $('#message').modal('show');
      }else{
        Swal.fire({
          title: 'Debes seleccionar algún destinatario',
          icon: 'warning',
        })
      }
    }

    const calendarRequest = (action, id, msg) => {
      let event = {
        'activitie_user': [{
          'id_activitie': id, //id del evento
          'id_user': user._id, //id del usuario
          'status': action  //2 para aceptar y 3 para rechazar
        }],
        'is_quote_provider': false,
        'is_crm': false
            }
      fetch('https://api.pedbox.co:8590/change_state_quote', {
        method: 'PUT', 
        body: JSON.stringify(event),
        headers:{
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        if(data.success){
          msg.texto.status = action;
          for(let activitie_user of msg.texto.activitie_user){
            if(activitie_user.id_user == user._id){
              activitie_user.status = action;
            }
          }
          let type_msg = "calendar"
          var msg_data = {
            "alias": user.alias,
            "img": user.url_img, 
            "emisor": user._id, 
            "receptor": msg.texto.info.id_user_register, 
            "leido_por": [], 
            "recibido_por": [], 
            "empresa": user.empresa, 
            "unread": {},
            "creado_en": moment().format("DD-MM-YYYY, HH:mm:ss"),
            "contenido": { 
              "texto": {
                  "subject": msg.texto.subject+" - "+(action == 3 ? "Rechazada" : "Aprobada"),
                  "detail": msg.texto.detail,
                  "id": ""+msg.texto.id+"",
                  "activitie_user": msg.texto.activitie_user,
                  "status": action,
                  "name_user_register": msg.texto.name_user_register,
                  "info": msg.texto.info
                }, 
              "tipo": type_msg, 
              "url": ""
            }, 
            "tipo_receptor": tipoReceptor, 
            "estado": {} 
          };

          // Objeto para lectura de mensajes
          msg_data.unread[emisor] = 0;
          msg_data.unread[receptor] = 0;

          // Objeto de estado
          msg_data.estado[receptor] = 1;
          msg_data.estado[emisor] = 1;

          if ($('.chat-cont[data-id="'+receptor+'"]').hasClass('card')) {
            var nOrder = new Date().getTime();
            $('.chat-cont[data-id="'+receptor+'"]')
              .attr('data-order', new Date().getTime())
              .data('order', nOrder)

            var texto = ' * Notificación ';
            try{
              texto = lastMessageChat[type_msg](msg_data);
            } catch {}
            
            $('.chat-cont[data-id="'+userSelected._id+'"]').find('.text-preview').html(texto);
            $('.chat-cont[data-id="'+userSelected._id+'"]').find('.time-msg').html(moment().format('h:mma'));
            sortLastChats();

            var msg = chatMessage[type_msg](msg_data);
            var cMsg = "c-msg c-emi mb-1 card shadow py-2 px-3 float-end";
            msg = `<div class="${cMsg}">${msg}<span class="hour-msg">${moment().format('h:mma')}</span></div>`;
            $('#chat-history').append(msg);
            scrollHistory();
          }
          console.log(msg_data);
          socket.emit('new_message', msg_data, (result) => { });
          $('#msg-text').val('');
          validarFuente();
          cancelPreview(0);
        }
      });
    };

    const buscar = () => {
      var filtro = $("#buscar").val().toLowerCase().replace(/\s/g,'');
      _.each(listUsers, (lu, i) => {
        _.each(_.groupBy(lu, 'subgrupo'), (u, j) => {
          $('#'+i.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'').replace(/["'\(\)]/g, "").replace(/[#]/g,'')+j.split(" ").join("").replace(/[&]/g,'y').replace(/[.]/g,'')+'View').addClass('noTiene');
          _.each(u, a =>{
            if((a.alias.toLowerCase().replace(/\s/g,'').indexOf(filtro) > -1)
                    || (a.usuario.toLowerCase().replace(/\s/g,'').indexOf(filtro) > -1 )
                    || (a.grupo.toLowerCase().replace(/\s/g,'').indexOf(filtro) > -1  )
                    || (a.subgrupo.toLowerCase().replace(/\s/g,'').indexOf(filtro) > -1)
                    || (a.telefono.toLowerCase().replace(/\s/g,'').indexOf(filtro) > -1)
                    || (a.identificacion.toLowerCase().replace(/\s/g,'').indexOf(filtro) > -1)
                    || filtro.length == 0){
                $('#u-'+a._id).parent().removeClass('noTiene');
                $('#u-'+a._id).removeClass('noTiene');
              }else{
                $('#u-'+a._id).addClass('noTiene');
              }
          }); 
        })
      })
    }

    const deleteMsg = (msgId, msgReceptor) => {
      Swal.fire({
        title: '¿Está seguro de eliminar el mensaje?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#8392ab',
        cancelButtonColor: '#8392ab',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
      }).then((result) => {
        if (result.isConfirmed) {
          dataId = msgId;
          console.log(dataId, msgReceptor);
          let obj = {'emisor': user._id.toString(), 'id': msgId.toString()};
          socket.emit('remove_msg', obj);
          $(`.card .shadow[data-id="${msgId}"]`).remove();
        }
      })
    }

    const deleteMsgAll = (msgId, msgEmisor, msgReceptor) => {
      Swal.fire({
        title: '¿Está seguro de eliminar el mensaje?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#8392ab',
        cancelButtonColor: '#8392ab',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
      }).then((result) => {
        if (result.isConfirmed) {
          dataId = msgId;
          console.log(dataId, msgEmisor, msgReceptor);
          let obj = {'emisor': msgEmisor.toString(), 'receptor': msgReceptor.toString(), 'id': msgId.toString()};
          socket.emit('remove_msg_all', obj);
          $($('.c-msg[data-id="'+msgId+'"]')).html('<div><i class="fas fa-ban">&nbsp</i><i>eliminaste este mensaje</i></div>');
          if(chat[0].indexToOrder == msgId)$($('.chat-cont[data-id="'+msgReceptor+'"]')).find('.text-preview').html(`<div class="status" style='color: gray; font-style: italic;'><i class="fas fa-ban">&nbsp</i>eliminaste este mensaje</div>`);
        }
      })
    }

    const deleteSelectedChats = () => { 
      Swal.fire({
        title: '¿Está seguro de eliminar los chats seleccionados?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#8392ab',
        cancelButtonColor: '#8392ab',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
      }).then((result) => {
        if (result.isConfirmed) {
          let checkBoxs = $(".inputCheckBoxDelete");
          dataIdElements = [];
          console.log(checkBoxs);
          for (let i = 0; i < checkBoxs.length; i++) {
            if (checkBoxs[i].checked) {
              parentContainerCheckbox = checkBoxs[i].parentElement.parentElement.parentElement.parentElement;
              dataId = $(parentContainerCheckbox).attr("data-id");
              console.log(dataId);
              dataIdElements.push(dataId)
              parentContainerCheckbox.remove();
              let obj = {'emisor': dataId.toString(), 'receptor': user._id.toString(), 'tipo_receptor': 'usuario'};
              socket.emit('remove_chat', obj);
            }
          }
          console.log(dataIdElements);
          $("#toggleStyleDeleteChat").css("text-decoration", "")
          $(".toggleCheckSelector").fadeOut("fast");
          $("#deleteSelectedChat").fadeOut("fast")
          currentStateDeleteChats = false;
        }
      })
    }

    //para mostrar el eliminar 
    const show = (id) => {
      $('#m-'+id).show()
    }

    const hide = (id) => {
      $('#m-'+id).hide();
    }

    $(document).ready(function () {
      $("#menuChat").addClass("activeNav")
      $("#preloader").hide();

      setTimeout(() => {
        if (idChat) {
          setChat(idChat)
        }
      }, 1300);
    })
  </script> 

</body>
</html>