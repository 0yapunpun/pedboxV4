<style>
  .notificationsHeader{
    overflow: hidden;
    font-weight: 600;
    font-size: 11px;
  }
  .closeSession a{
    transition: 0.3s;
  }
  .closeSession a:hover{
    color: red;
  }
  .imgClass{
    max-width: 100%;
    max-height: 100%;
    min-width: 100%;
    object-fit: cover;
    border-radius: 50%;
  }
  #menuNotifications{
    top: -10px;
    max-height: 60vh;
    margin-top: 0 !important;
    padding: 5px !important;
    width: 270px;
    border: solid 1px #f3efef;
    overflow-y: scroll;
    scrollbar-width: none;
  }
  #menuNotifications::-webkit-scrollbar { 
    display: none;  
  }
  .notificationTextMessage{ 
    margin-left: 5px;
    max-height: 35px;
    overflow: hidden;
  }
  .notificationUserName{
    margin-top: 5px;
  }
  #menuNotifications::before{
    display: none;
  }
  .iconNotification{
    padding: 0 10px;
  }
  #notificationCenterIndicator{
    position: absolute; 
    bottom: 55%; 
    left: 10%; 
    border: solid; 
    color: white; 
    padding: 10px !important;
  }

  .notificationCenterSectionIndicator{
    position: absolute; 
    bottom: 55%; 
    left: 50%; 
    border: solid; 
    color: white; 
    padding: 10px !important;
  }

  .badgeAnimation{
    animation: blinker 0.5s linear 3;
  }
  @keyframes blinker {
    0% { bottom: 55%; }
    50% { bottom: 75%; }
    100% { bottom: 55%; }
  }

  #notificationCenterContainer{
    display: none;
    width: 300px;
    height: 300px;
    background-color: white;
    top: 100%;
    padding: 10px;
    border-radius: 0.5rem;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 30%);
    overflow-y: scroll;
  }
  .notificationCenterHeader{
    padding: 5px;
    display: flex;
  }
  .boderRightNotificationHeader{
    border-right: solid 1px lightgray ;
  }
  .notificationCenterHeader i {
    font-size: 18px;
  }
  #notificationCenterContainerBody li{
    transition: 0.3s;
    border-radius: 0.5rem;
    cursor: pointer;
  }
  #notificationCenterContainerBody li:hover{
    background-color: #ebebeb !important;
  }

  #paginatorNotificationCenter{
    width: 100%;
    display: flex;
    background-color: #F6F7F8;
    border-radius: 0.5rem;
  }
  #paginatorNotificationCenter li{
    list-style-type: none;
    width: 50%;
    transition: 0.6s;
  }
  .activeNavNotificationCenter{
    border-radius: 0.5rem;
    background-color: white;
    box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%);
  }
</style>

<nav class="navbar navbar-main navbar-expand-lg position-sticky mt-4 top-1 px-0 mx-4 shadow-none border-radius-xl z-index-sticky" id="navbarBlur" data-scroll="true">
  <div class="container-fluid py-1 px-3">
    <div class="sidenav-toggler sidenav-toggler-inner d-xl-block d-none ">
      <a href="javascript:;" class="nav-link text-body p-0 btn-sidenav">
        <div class="sidenav-toggler-inner">
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
        </div>
      </a>
    </div>
    <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
      <ul class="navbar-nav  justify-content-end">
        <li class="nav-item d-xl-none ps-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="iconNavbarSidenav">
            <div class="sidenav-toggler-inner">
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
            </div>
          </a>
        </li>
        <!-- Comentado hasta que se implemente la funcionalidad de opciones
          <li class="nav-item px-3 d-flex align-items-center" id="editBtnHeader">
            <a href="javascript:;" class="nav-link text-body p-0" onclick="" id="showSidebarMaster">
              <i class="fa fa-cog  cursor-pointer"></i>
            </a>
          </li> 
        -->
        <li class="nav-item dropdown px-3 d-flex align-items-center" style="position: relative;">
          <a onclick="showNotificationsCenter()"  id="dropMenuNotifications" href="javascript:;" class="nav-link text-body p-0" >
            <i class="fa fa-bell cursor-pointer" id="notificationBellIcon"></i>
          </a>
          <div id="notificationCenterIndicator" class="badge badge-sm badge-circle badge-floating badge-primary border-white" ></div>

          <div id="notificationCenterContainer" style="position: absolute;">
            <div>
              <div class="notificationCenterHeader">
                <div class=" position-relative end-0 w-100">

                  <ul class="p-1" id="paginatorNotificationCenter">
                    <li class="nav-item activeNavNotificationCenter">
                      <a id="notificationCenterSection1" class="nav-link mb-0 px-0 py-1">
                        <div data-section="1" class="notificationCenterSectionBtn d-flex align-items-center justify-content-center">
                          <div style="position: relative;">
                            <i class="fas fa-comment-alt"></i>
                            <div id="notificationCenterIndicatorSection1" class="badge badge-sm badge-circle badge-floating badge-primary border-white notificationCenterSectionIndicator">  </div>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li class="nav-item">
                      <a id="notificationCenterSection2" class="nav-link mb-0 px-0 py-1">
                        <div data-section="2" class="notificationCenterSectionBtn d-flex align-items-center justify-content-center">
                          <div style="position: relative;">
                            <i class="fas fa-calendar" ></i>
                            <div id="notificationCenterIndicatorSection2" class="badge badge-sm badge-circle badge-floating badge-primary border-white notificationCenterSectionIndicator">  </div>
                          </div>
                        </div>
                      </a>
                    </li>

                  </ul>
               </div>
              </div>
              <hr class="horizontal dark" style="margin: 0;"> 
              <div style="padding: 5px;" id="notificationCenterContainerBody"> 
                <div data-section="1" id="notificationCenterMessages" class="notificationCenterSection">
                  <!-- Contenido Dinamico --> 
                </div>
                <div data-section="2" id="notificationCenterCalendar" class="notificationCenterSection" style="display: none;">
                  <!-- Contenido Dinamico --> 
                </div>
              </div>
            </div>

          </div>
        </li>
      </ul>
    </div>
    <div class="w-50 d-flex justify-content-end align-items-center gap-2 me-3">
      <div style="text-align: right;" class="d-flex flex-column">
        <label class="m-0"  id="userNameHeader"> <%- session.user.name %> </label>
        <label for="" class="m-0 closeSession" style="font-size: 11px; cursor: pointer;">
          <a href="/logout">
            Cerrar Sesion
          </a>
        </label>
      </div>
      <div style="width: 50px; height: 50px; background-color: white; overflow: hidden; border-radius: 50%;">
        <img id="imgNavUser" src="" class="imgClass" alt="" style="object-fit: scale-down;">
      </div>
    </div>
  </div>
</nav>


<script>
  // Notification system functions
  let session = `<%- JSON.stringify(session) %>`;
      session = JSON.parse(session);
  let currentDate = new Date().toISOString().split("T")[0]
  let dailyNotifications = "dailyNotifications" + session.user.id;
  let socketListenerN = false;
  let enableFetchCall = true; // llevar control del las llamadas fetch y permitir que solo se haga una por vez
  const audioNotification = new Audio("/sounds/notification.mp3");

  let removeNotificationKind = (kind) => {
    if (enableFetchCall) {
      enableFetchCall = false
      fetch("/removeNotificationByKind/"+session.user.id+"/"+kind)
      .then(response => response.json())
      .then(data => {
        enableFetchCall = true; 
      });
    }
  }

  let playNotificationSound = () => {
    audioNotification.autoplay = true;
    try {
      audioNotification.play();
    } catch (error) {
      console.log("unable to reproduce the notification sound")      
    }
  };

  let notificationAnimation = () => {
    $("#notificationCenterIndicator").addClass("badgeAnimation")
    setTimeout(() => {
      $("#notificationCenterIndicator").removeClass("badgeAnimation")
    }, 1000);
    playNotificationSound()
    notificationsIndicator()
  };

  let notificationsIndicator = () => {
    let amountSection1 = $("#notificationCenterMessages>li").length;
    let amountSection2 = $("#notificationCenterCalendar>li").length;
    let totalAmount = amountSection1 + amountSection2;
    
    if (totalAmount == 0) {
      $("#notificationCenterIndicator").html("")
    } else {
      $("#notificationCenterIndicator").html(totalAmount)
    }

    if (amountSection1 == 0) {
      $("#notificationCenterIndicatorSection1").html("")
      $("#notificationIndicatorSidebarChat").html("")
      $("#notificationCenterMessages").html("<div class='noMessageIndicator text-center text-secondary font-weight-bolder text-xs mt-2'>No hay notificaciones</div>")

    } else {
      $("#notificationCenterMessages").find(".noMessageIndicator").remove()
      $("#notificationCenterIndicatorSection1").html(amountSection1)
      $("#notificationIndicatorSidebarChat").html(amountSection1)
    }

    if (amountSection2 == 0) {
      $("#notificationCenterIndicatorSection2").html("")
      $("#notificationCenterCalendar").html("<div class='noMessageIndicator text-center text-secondary font-weight-bolder text-xs mt-2'>No hay notificaciones</div>")
    } else {
      $("#notificationCenterCalendar").find(".noMessageIndicator").remove()
      $("#notificationCenterIndicatorSection2").html(amountSection2)
    }
  }

  let messageNotification  = (img, message, emitor, idEmisor) => {
    let element = `
      <li data-kind="5" class="notificationKindMessage" data-emisor="${idEmisor}">
        <span class='r10 notificationsHeader d-flex my-1' style="position: relative;">
          <img src='https://api.pedbox.co:8590${img}' width='30' height='30' style="border-radius: 50%; margin: 5px; margin-right: 15px;">
          <div class="d-flex flex-column justify-content-center w-100">
            <div style="font-weight: 800;"> Nuevo Mensaje </div>
            <div class="text-secondary notificationTextMessage"> <em>" ${message} " </em></div>
            <div class="text-secondary notificationUserName"> ${emitor} </div>
            <div class="text-secondary text-end mt-1" style="font-size: 9px;"> ${nvFormatDate(new Date(), "dddd DD de mmmm, YYYY")} </div>
          </div>
          <div style="position: absolute; height: 100px; width: 3px; background-color: red; left: 40px;"></div>
        </span>
      </li>
    `;
    $("#notificationCenterMessages").prepend(element);
  }

  let notificationBirthDay = (data) => {
    let element = `
      <li class="notificationKindCalendar notificationBirthdays" data-emisor="${data.id}">
        <span class='r10 notificationsHeader d-flex my-1' style="position: relative;">
          <img src='https://api.pedbox.co:8590${data.photo}' width='30' height='30' style="border-radius: 50%; margin: 5px; margin-right: 15px;">
          <div class="d-flex flex-column justify-content-center w-100">
            <div style="font-weight: 800;"> Es el cumpleaños de: </div>
            <div class="text-secondary"> 🎉 ${data.first_name + " " + data.first_lastname} 🎉 </div>
            <div class="text-secondary"> Envíale un mensaje de felicitaciones </div>
            <div class="text-secondary text-end mt-1" style="font-size: 9px;"> ${nvFormatDate(new Date(), "dddd DD de mmmm, YYYY")} </div>
          </div>
          <div style="position: absolute; height: 100px; width: 3px; background-color: #fbcf32; left: 40px;"></div>
        </span>
      </li>
    `;
    $("#notificationCenterCalendar").prepend(element);
    notificationsIndicator()
  }

  let notificationCalendar = (img, title, minutes) => {
    let element = `
      <li data-kind="6" class="notificationKindCalendar">
        <span class='r10 notificationsHeader d-flex my-1' style="position: relative;">
          <img src='https://api.pedbox.co:8590${img}' width='30' height='30' style="border-radius: 50%; margin: 5px; margin-right: 15px;">
          <div class="d-flex flex-column justify-content-center w-100">
            <div style="font-weight: 800;"> Evento en ${minutes} minutos</div>
            <div class="text-secondary"> ${title} </div>
            <div class="text-secondary text-end mt-1" style="font-size: 9px;"> ${nvFormatDate(new Date(), "dddd DD de mmmm, YYYY")} </div>
          </div>
          <div style="position: absolute; height: 100px; width: 3px; background-color: #3788D8; left: 40px;"></div>
        </span>
      </li>
    `;
    $("#notificationCenterCalendar").prepend(element);
    notificationsIndicator()
  }

  let loadNotificationsLocalStorage = (data) => {
    if (!localStorage.hasOwnProperty('pedboxBirthdays')) {return}

    let date = new Date().toDateInputValue();
    let dataLS = localStorage.getItem("pedboxBirthdays");
        dataLS = JSON.parse(dataLS);

    if (dataLS.date == date) { // Current Birthdays
      for (let i = 0; i < dataLS.data.length; i++) {
        notificationBirthDay(dataLS.data[i])
      }
    } else { // Delete outdated birthdays
      dataLS.data = {}
      localStorage.setItem("pedboxBirthdays", JSON.stringify(dataLS))
    }
  }

  let createNotification = (data) => {
    let notificationKind;
    let obj;
    try { // Notification that are not text messages has the notificationData property
      notificationKind = data.contenido.notificationData.kind;
    } catch (error) {
      notificationKind = "textMessage"
    }

    switch (notificationKind) {
      case "birthday":
        if ($(".notificationBirthdays").length != 0) {return} // If the notification it's already displayed
        let date = new Date().toDateInputValue();

        if (localStorage.hasOwnProperty('pedboxBirthdays')) {

          if ($(".notificationBirthdays").length) { return }

          let dataLS = localStorage.getItem("pedboxBirthdays");
              dataLS = JSON.parse(dataLS);
          if (dataLS.date != date) {
            dataLS = data.contenido.notificationData.data;
            localStorage.setItem("pedboxBirthdays", JSON.stringify({date: date, data: dataLS}));
            for (let i = 0; i < dataLS.length; i++) {
              notificationBirthDay(dataLS[i])
              let notificationObject = {icon: "https://api.pedbox.co:8590" + dataLS[i].photo, }
              notificationApi("cumpleaños de 🎉" + dataLS[i].first_name + " "+ dataLS[i].first_lastname+ " 🎉", notificationObject)
            }
            notificationAnimation();
          } 
        } else {
          let dataLS = data.contenido.notificationData.data;
          localStorage.setItem("pedboxBirthdays", JSON.stringify({date: date, data: dataLS}));
          for (let i = 0; i < dataLS.length; i++) {
            notificationBirthDay(dataLS[i])
            let notificationObject = {icon: "https://api.pedbox.co:8590" + dataLS[i].photo, }
            notificationApi("cumpleaños de 🎉" + dataLS[i].first_name + " "+ dataLS[i].first_lastname+ " 🎉", notificationObject)
          }
          notificationAnimation();
        }
        break;

      case "textMessage":
        let message = data.contenido.texto;
        if (message.length > 50) {
          message = message.substring(0, 50);
          message += " ..."
        }

        obj = {
          "message": message,
          "title": data.alias, // Saving Message Emitor name
          "kind": 5, // 5 for messages
          "params": data.img, // Saving Message Emitor Img
          "idChat": data.emisor
        }

        createNotificationRegister(obj);
        messageNotification(data.img, obj.message, obj.title, data.emisor);
        notificationAnimation();

        let notificationObject = {
          body: obj.message,
          icon: "https://api.pedbox.co:8590" + data.img, 
        }
        notificationApi("Mensaje: " + obj.title, notificationObject)
        break

      case "calendar":
        let imgCalendar = _.where(persons.result.datas.persons, {id_user: Number(data.contenido.notificationData.data.id_user_register)}) || {photo: ""}
        console.log("user calendar", imgCalendar)
        obj = {
          "message": data.contenido.notificationData.data.subject,
          "title": data.contenido.notificationData.data.notification.split("-")[0],
          "kind": 6, // 5 for calendar events
          "params": imgCalendar[0].photo 
        }

        createNotificationRegister(obj);
        notificationCalendar(obj.params, obj.message, obj.title)
        notificationAnimation();
        notificationApi("Evento en " + obj.title + " minutos: " + obj.message)
        break

      default:
        break;
    }
  }

  let removeNotification = (kind) => {
    fetch("/removeNotificationByKind/"+session.user.id+"/"+ kind)
  }

  let createNotificationRegister = (data) => {
    let dataNotification = {
      "kind": data.kind, //Message
      "id_company": session.user.id_company,
      "id_user": session.user.id,
      "open": 0,
      "title": data.title,
      "message": data.message,
      "type": (data.idChat ? data.idChat : "spv4"),
      "params": data.params,
      "date":new Date().toISOString()
    }

    fetch("/createNotification", {
      method: 'POST',
      body: JSON.stringify(dataNotification), 
      headers:{'Content-Type': 'application/json'} 
    })
  }

  let loadNotificationRegister = () => {
    fetch("/getNotifications/" + session.user.id)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        data = data.result
        for (let i = 0; i < data.length; i++) {
          if (data[i].kind == 5) {
            messageNotification(data[i].params, data[i].message, data[i].title, data[i].type)
          }
          if (data[i].kind == 6) {
            notificationCalendar(data[i].params, data[i].message, data[i].title)
          }
        }
        notificationsIndicator()
      } 
    });
  }
  
  let socketChat = io.connect('https://chat.pedbox.co:3333', { transports: ["websocket"] }); // revisar ruta socket
  socketChat.on('connect', (evt) => {
    // console.log("socket chat connected"); // Test logs disabled
    socketChat.emit('login', {'usuario': session.user.user, 'empresa': session.user.id_company});
    if (!socketListenerN) suscribeSocketsN();
  });
  const suscribeSocketsN = () => {
    // console.log("socket chat subscribed")
    socketListenerN = true;
    socketChat.on('new_message', (resp) => { 
      createNotification(resp)
    })
  }

  let notificationApi = (title, body) => {
    if (Notification.permission === "granted") {
      var notification = new Notification(title, body);
    } else if (Notification.permission !== 'denied') {
      Notification.requestPermission(function (permission) {
        if (permission === "granted") {
          var notification = new Notification(title, body);
        }
      });
    }
  }

  let showNotificationsCenter = () => {
    if ($("#notificationCenterContainer").is(":visible")) {
      $("#notificationCenterContainer").hide()
    } else {
      $("#notificationCenterContainer").fadeIn("fast")
    }
  }

  let redirectChat = (idChat) => {
    window.location.href = '/chat/chatId/'+idChat;
  }

  $("#notificationCenterSection1").on("click", function () {
    $(".notificationCenterSection").hide();
    $("#notificationCenterMessages").show();
    $(".nav-item").removeClass("activeNavNotificationCenter");
    $(this).parent().addClass("activeNavNotificationCenter");
  })

  $("#notificationCenterSection2").on("click", function () {
    $(".notificationCenterSection").hide();
    $("#notificationCenterCalendar").show();
    $(".nav-item").removeClass("activeNavNotificationCenter");
    $(this).parent().addClass("activeNavNotificationCenter");
  })

  $(document).on("click", ".notificationKindMessage", function () {
    removeNotificationKind(5);
    $("#notificationCenterMessages").html("");
    showNotificationsCenter()

    setTimeout(() => {
      notificationsIndicator()
    }, 300);

    let idChat = $(this).attr("data-emisor")
    redirectChat(idChat)
  })

  $(document).on("click", ".notificationBirthdays", function () {
    removeNotificationKind(6);
    $(".notificationBirthdays").remove();

    let dataLS = JSON.parse(window.localStorage.getItem('pedboxBirthdays')); 
        dataLS.data = {}
    window.localStorage.setItem('pedboxBirthdays', JSON.stringify(dataLS));
    
    showNotificationsCenter()
    notificationsIndicator()

    let idChat = $(this).attr("data-emisor")
    redirectChat(idChat)
  })

  $(document).on("click", ".notificationKindCalendar", function () {
    removeNotificationKind(6);
    $("#notificationCenterCalendar").html("");
    showNotificationsCenter()

    setTimeout(() => {
      notificationsIndicator()
    }, 300);
  })

  const notificationCenterContainerEl = document.querySelector('#notificationCenterContainer');
  $(document).on('click', function(e) { // Cerrar sidebar 
    if (!notificationCenterContainerEl.contains(e.target) && e.target.id != "notificationBellIcon") {
      $("#notificationCenterContainer").hide();
    }
  });

  loadNotificationsLocalStorage()
  loadNotificationRegister()
</script>