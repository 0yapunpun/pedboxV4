<style>
  .notificationsHeader{
    overflow: hidden;
    font-weight: 600;
    font-size: 11px;
  }
  .closeSession a{
    transition: 0.3s;
  }
  .closeSession a:hover{
    color: red;
  }
  .imgClass{
    max-width: 100%;
    max-height: 100%;
    min-width: 100%;
    object-fit: cover;
    border-radius: 50%;
  }
  #menuNotifications{
    top: -10px;
    max-height: 60vh;
    margin-top: 0 !important;
    padding: 5px !important;
    width: 270px;
    border: solid 1px #f3efef;
    overflow-y: scroll;
    scrollbar-width: none;
  }
  #menuNotifications::-webkit-scrollbar { 
    display: none;  
  }
  .notificationTextMessage{ 
    margin-left: 5px;
    max-height: 35px;
    overflow: hidden;
  }
  .notificationUserName{
    margin-top: 5px;
  }
  #menuNotifications::before{
    display: none;
  }
  .iconNotification{
    padding: 0 10px;
  }
  #cartIndicator{
    position: absolute; 
    bottom: 55%; 
    left: 10%; 
    border: solid; 
    color: white; 
    padding: 10px !important;
  }

  .badgeAnimation{
    animation: blinker 0.5s linear 3;
  }
  @keyframes blinker {
    0% { bottom: 55%; }
    50% { bottom: 75%; }
    100% { bottom: 55%; }
  }
</style>

<nav class="navbar navbar-main navbar-expand-lg position-sticky mt-4 top-1 px-0 mx-4 shadow-none border-radius-xl z-index-sticky" id="navbarBlur" data-scroll="true">
  <div class="container-fluid py-1 px-3">
    <div class="sidenav-toggler sidenav-toggler-inner d-xl-block d-none ">
      <a href="javascript:;" class="nav-link text-body p-0 btn-sidenav">
        <div class="sidenav-toggler-inner">
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
        </div>
      </a>
    </div>
    <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
      <ul class="navbar-nav  justify-content-end">
        <li class="nav-item d-xl-none ps-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="iconNavbarSidenav">
            <div class="sidenav-toggler-inner">
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
            </div>
          </a>
        </li>
        <li class="nav-item px-3 d-flex align-items-center" id="editBtnHeader">
          <a href="javascript:;" class="nav-link text-body p-0" onclick="showSidebar(1)" id="showSidebarMaster">
            <i class="fa fa-cog  cursor-pointer"></i>
          </a>
        </li>
        <li class="nav-item dropdown pe-2 d-flex align-items-center">
          <a id="dropMenuNotifications" href="javascript:;" class="nav-link text-body p-0" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="fa fa-bell cursor-pointer"></i>
          </a>
          <div id="cartIndicator" class="badge badge-sm badge-circle badge-floating badge-primary border-white" ></div>
          <ul class="dropdown-menu" aria-labelledby="dropMenuNotifications" id="menuNotifications">
            <div id="emptyNotifications" class="text-center m-2" style="display: none;">
              <span class="text-secundary text-center">No hay notificaciones por mostrar</span>
            </div>
          </ul>
        </li>
      </ul>
    </div>
    <div class="w-50 d-flex justify-content-end align-items-center gap-2 me-3">
      <div style="text-align: right;" class="d-flex flex-column">
        <label class="m-0"  id="userNameHeader"> <%- session.user.name %> </label>
        <label for="" class="m-0 closeSession" style="font-size: 11px; cursor: pointer;">
          <a href="/logout">
            Cerrar Sesion
          </a>
        </label>
      </div>
      <div style="width: 50px; height: 50px; background-color: white; overflow: hidden; border-radius: 50%;">
        <img id="imgNavUser" src="" class="imgClass" alt="" style="object-fit: scale-down;">
      </div>
    </div>
  </div>
</nav>


<script>
  let session = `<%- JSON.stringify(session) %>`;
      session = JSON.parse(session);
  let currentDate = new Date().toISOString().split("T")[0]
  let dailyNotifications = "dailyNotifications" + session.user.id;
  let socketListenerN = false;
  let enableFetchCall = true; // llevar control del las llamadas fetch y permitir que solo se haga una por vez
  const audioNotification = new Audio("/sounds/notification.mp3");

  $('#dropMenuNotifications').on('hidden.bs.dropdown', function () {
    removeNotificationKind(6)
    removeNotificationKind(5)
    let notifications = $("#menuNotifications>li")
    for (let i = 0; i < notifications.length; i++) {
      if ($(notifications[i]).attr("data-kind") == "5") {
        $(notifications[i]).remove()
      }
      if ($(notifications[i]).attr("data-kind") == "6") {
        $(notifications[i]).remove()
      }
    }
    notificationsIndicator()
  })

  $('#dropMenuNotifications').on('shown.bs.dropdown', function () {
    let notifications = $("#menuNotifications>li").length
    if (notifications == 0) {
      $("#emptyNotifications").show()
    } else {
      $("#emptyNotifications").hide()
    }
  })

  let removeNotificationKind = (kind) => {
    if (enableFetchCall) {
      enableFetchCall = false
      fetch("/removeNotificationByKind/"+session.user.id+"/"+kind)
      .then(response => response.json())
      .then(data => {
        enableFetchCall = true; 
      });
    }
  }

  let playNotificationSound = () => {
    audioNotification.autoplay = true;
    try {
      audioNotification.play();
    } catch (error) {
      console.log("unable to reproduce the notification sound")      
    }
  };

  let notificationAnimation = () => {
    $("#cartIndicator").addClass("badgeAnimation")
    setTimeout(() => {
      $("#cartIndicator").removeClass("badgeAnimation")
    }, 1000);
    playNotificationSound()
    notificationsIndicator()
  };

  let notificationsIndicator = () => {
    let amount = $("#menuNotifications>li").length;
    if (amount != 0) {$("#cartIndicator").html(amount)}
    else {$("#cartIndicator").html("")}
  }

  let messageNotification  = (img, message, emitor) => {
    let element = `
      <li data-kind="5">
        <span class='r10 notificationsHeader d-flex my-1' style="position: relative;">
          <img src='https://api.pedbox.co:8590${img}' width='30' height='30' style="border-radius: 50%; margin: 5px; margin-right: 15px;">
          <div class="d-flex flex-column justify-content-center w-100">
            <div style="font-weight: 800;"> Nuevo Mensaje </div>
            <div class="text-secondary notificationTextMessage"> <em>" ${message} " </em></div>
            <div class="text-secondary notificationUserName"> ${emitor} </div>
            <div class="text-secondary text-end mt-1" style="font-size: 9px;"> ${nvFormatDate(new Date(), "dddd DD de mmmm, YYYY")} </div>
          </div>
          <div style="position: absolute; height: 100px; width: 3px; background-color: red; left: 40px;"></div>
        </span>
      </li>
    `;
    $("#menuNotifications").append(element);
  }

  let notificationBirthDay = (data) => {
    let element = `
      <li class="notificationBirthdays">
        <span class='r10 notificationsHeader d-flex my-1' style="position: relative;">
          <img src='https://api.pedbox.co:8590${data.photo}' width='30' height='30' style="border-radius: 50%; margin: 5px; margin-right: 15px;">
          <div class="d-flex flex-column justify-content-center w-100">
            <div style="font-weight: 800;"> Es el cumpleaÃ±os de: </div>
            <div class="text-secondary"> ðŸŽ‰ ${data.first_name + " " + data.first_lastname} ðŸŽ‰ </div>
            <div class="text-secondary"> EnvÃ­ale un mensaje de felicitaciones </div>
            <div class="text-secondary text-end mt-1" style="font-size: 9px;"> ${nvFormatDate(new Date(), "dddd DD de mmmm, YYYY")} </div>
          </div>
          <div style="position: absolute; height: 100px; width: 3px; background-color: #fbcf32; left: 40px;"></div>
        </span>
      </li>
    `;
    $("#menuNotifications").append(element);
    notificationsIndicator()
  }

  let notificationCalendar = (img, title, minutes) => {
    let element = `
      <li data-kind="6">
        <span class='r10 notificationsHeader d-flex my-1' style="position: relative;">
          <img src='https://api.pedbox.co:8590${img}' width='30' height='30' style="border-radius: 50%; margin: 5px; margin-right: 15px;">
          <div class="d-flex flex-column justify-content-center w-100">
            <div style="font-weight: 800;"> Evento en ${minutes} minutos</div>
            <div class="text-secondary"> ${title} </div>
            <div class="text-secondary text-end mt-1" style="font-size: 9px;"> ${nvFormatDate(new Date(), "dddd DD de mmmm, YYYY")} </div>
          </div>
          <div style="position: absolute; height: 100px; width: 3px; background-color: #3788D8; left: 40px;"></div>
        </span>
      </li>
    `;
    $("#menuNotifications").append(element);
    notificationsIndicator()
  }

  let loadNotificationsLocalStorage = (data) => {
    if (!localStorage.hasOwnProperty('pedboxBirthdays')) {return}

    let date = new Date().toDateInputValue();
    let dataLS = localStorage.getItem("pedboxBirthdays");
        dataLS = JSON.parse(dataLS);

    if (dataLS.date == date) { // Current Birthdays
      for (let i = 0; i < dataLS.data.length; i++) {
        notificationBirthDay(dataLS.data[i])
      }
    } else { // Delete outdated birthdays
      dataLS.data = {}
      localStorage.setItem("pedboxBirthdays", JSON.stringify(dataLS))
    }
  }

  let createNotification = (data) => {
    let notificationKind;
    let obj;
    try { // Notification that are not text messages has the notificationData property
      notificationKind = data.contenido.notificationData.kind;
    } catch (error) {
      notificationKind = "textMessage"
    }

    switch (notificationKind) {
      case "birthday":
        if ($(".notificationBirthdays").length != 0) {return} // If the notification it's already called
        let date = new Date().toDateInputValue();
        if (localStorage.hasOwnProperty('pedboxBirthdays')) {
          let dataLS = localStorage.getItem("pedboxBirthdays");
              dataLS = JSON.parse(dataLS);

          if (dataLS.date != date) {
            for (let i = 0; i < dataLS.data.length; i++) {
              notificationBirthDay(dataLS.data[i])
              let notificationObject = { icon: "https://api.pedbox.co:8590" + dataLS.data[i].photo, }
              notificationApi("cumpleaÃ±os de ðŸŽ‰" + dataLS.data[i].first_name + " "+ dataLS.data[i].first_lastname+ " ðŸŽ‰", notificationObject)
            }
            notificationAnimation();
          } else {
            $(".notificationBirthdays").remove()
          }

        } else {
          let dataLS = data.contenido.notificationData.data;
          localStorage.setItem("pedboxBirthdays", JSON.stringify({date: date, data: dataLS}));
          for (let i = 0; i < dataLS.length; i++) {
            notificationBirthDay(dataLS[i])
            let notificationObject = {icon: "https://api.pedbox.co:8590" + dataLS[i].photo, }
            notificationApi("cumpleaÃ±os de ðŸŽ‰" + dataLS[i].first_name + " "+ dataLS[i].first_lastname+ " ðŸŽ‰", notificationObject)
          }
          notificationAnimation();
        }
        break;

      case "textMessage":
        let message = data.contenido.texto;
        if (message.length > 50) {
          message = message.substring(0, 50);
          message += " ..."
        }

        obj = {
          "message": message,
          "title": data.alias, // Saving Message Emitor name
          "kind": 5, // 5 for messages
          "params": data.img // Saving Message Emitor Img
        }

        createNotificationRegister(obj);
        messageNotification(data.img, obj.message, obj.title);
        notificationAnimation();


        let notificationObject = {
          body: obj.message,
          icon: "https://api.pedbox.co:8590" + data.img, 
        }
        notificationApi("Mensaje: " + obj.title, notificationObject)
        break

      case "calendar":
        let imgCalendar = _.where(persons.result.datas.persons, {id_user: Number(data.contenido.notificationData.data.id_user_register)}) || {photo: ""}
        console.log("user calendar", imgCalendar)
        obj = {
          "message": data.contenido.notificationData.data.subject,
          "title": data.contenido.notificationData.data.notification.split("-")[0],
          "kind": 6, // 5 for calendar events
          "params": imgCalendar[0].photo 
        }

        createNotificationRegister(obj);
        notificationCalendar(obj.params, obj.message, obj.title)
        notificationAnimation();
        notificationApi("Evento en " + obj.title + " minutos: " + obj.message)
        break

      default:
        break;
    }
  }

  let removeNotification = (kind) => {
    fetch("/removeNotificationByKind/"+session.user.id+"/"+ kind)
    .then(response => response.json())
    .then(data => {
      console.log("cleaned Notification")
    });
  }

  let createNotificationRegister = (data) => {
    let dataNotification = {
      "kind": data.kind, //Message
      "id_company": session.user.id_company,
      "id_user": session.user.id,
      "open": 0,
      "title": data.title,
      "message": data.message,
      "type": "spv4",
      "params": data.params,
      "date":new Date().toISOString()
    }

    fetch("/createNotification", {
      method: 'POST',
      body: JSON.stringify(dataNotification), 
      headers:{'Content-Type': 'application/json'} 
    })
  }

  let loadNotificationRegister = () => {
    fetch("/getNotifications/" + session.user.id)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        data = data.result
        for (let i = 0; i < data.length; i++) {
          if (data[i].kind == 5) {
            messageNotification(data[i].params, data[i].message, data[i].title)
          }
          if (data[i].kind == 6) {
            notificationCalendar(data[i].params, data[i].message, data[i].title)
          }
        }
        notificationsIndicator()
      } else {

      }
    });
  }
  
  let socketChat = io.connect('https://chat.pedbox.co:3333', { transports: ["websocket"] }); // revisar ruta socket
  socketChat.on('connect', (evt) => {
    // console.log("socket chat connected"); // Test logs disabled
    socketChat.emit('login', {'usuario': session.user.user, 'empresa': session.user.id_company});
    if (!socketListenerN) suscribeSocketsN();
  });
  const suscribeSocketsN = () => {
    // console.log("socket chat subscribed")
    socketListenerN = true;
    socketChat.on('new_message', (resp) => { 
      createNotification(resp)
    })
  }

  let notificationApi = (title, body) => {
    if (Notification.permission === "granted") {
      var notification = new Notification(title, body);
    } else if (Notification.permission !== 'denied') {
      Notification.requestPermission(function (permission) {
        if (permission === "granted") {
          var notification = new Notification(title, body);
        }
      });
    }
  }

  loadNotificationsLocalStorage()
  loadNotificationRegister()
</script>
